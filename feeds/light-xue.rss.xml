<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>0xFEE1C001 - Light Xue</title><link>http://www.lightxue.com/</link><description>Where there is a shell, there is a way</description><lastBuildDate>Mon, 26 Jun 2017 01:00:00 +0800</lastBuildDate><item><title>简单地理解Python的装饰器</title><link>http://www.lightxue.com/understand-python-decorator-the-easy-way</link><description>&lt;p&gt;Python有大量强大又贴心的特性，如果要列个最受欢迎排行榜，那么装饰器绝对会在其中。&lt;/p&gt;
&lt;p&gt;初识装饰器，会感觉到优雅且神奇，想亲手实现时却总有距离感，就像深闺的冰美人一般。这往往是因为理解装饰器时把其他的一些概念混杂在一起了。待我抚去层层面纱，你会看到纯粹的装饰器其实蛮简单直率的。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Mon, 26 Jun 2017 01:00:00 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2017-06-26:/understand-python-decorator-the-easy-way</guid><category>Python</category></item><item><title>[译]让你的Python代码优雅又地道</title><link>http://www.lightxue.com/transforming-code-into-beautiful-idiomatic-python</link><description>&lt;h2&gt;译序&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说优雅也有缺点的话，那就是你需要艰巨的工作才能得到它，需要良好的教育才能欣赏它。&lt;/p&gt;
&lt;p&gt;—— Edsger Wybe Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Sun, 18 Jun 2017 17:55:00 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2017-06-18:/transforming-code-into-beautiful-idiomatic-python</guid><category>Python</category></item><item><title>Python源码寻宝记——地图篇</title><link>http://www.lightxue.com/python-internals-locate-source-code</link><description>&lt;p&gt;如果读源码的方式是打开源码包，一个个文件，一行行开始读。这种阅读源码方式太枯燥了。另一种方式，对Python的设计有了基本的了解后，找感兴趣的部分去阅读。兴致高，目的性强，内容少，阅读的过程会轻松有趣得多。&lt;/p&gt;
&lt;p&gt;对Python设计基本了解包括对总体架构设计，对象系统实现原理，字节码的生成和解释过程有大致的了解。哪天闲得不行，可以写写这方面的文章。&lt;/p&gt;
&lt;p&gt;感兴趣的部分源码怎么找？这个就是此文的主题了——如何找到特定逻辑的源码。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Tue, 22 Mar 2016 23:44:21 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2016-03-22:/python-internals-locate-source-code</guid><category>Python</category></item><item><title>Python源码寻宝记——挖坑不埋</title><link>http://www.lightxue.com/python-internals-introductory</link><description>&lt;p&gt;作为pythonista，不禁感慨Python的易用与强大。时不时会想，这个好用的语法是怎么实现的，那个神奇库是怎么回事。后来开始翻Python源码，读感兴趣的部分的实现时，像是找到了个四次元口袋。这里有奇思妙想的算法实现，也有精妙绝伦的性能优化，还有天马行空的语法原理。源码的风格也和Python所倡导的一样，简洁优雅，阅读的时候心情十分愉悦。&lt;/p&gt;
&lt;p&gt;记下源码里有趣的地方，是件有意思的事。但按这个博客一直以来自娱自乐的尿性，注定了这个系列是只会把坑越挖越大。这里不要脸地承认了，这就是在挖坑。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Tue, 22 Mar 2016 23:34:21 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2016-03-22:/python-internals-introductory</guid><category>Python</category></item><item><title>邮件发送实践经验</title><link>http://www.lightxue.com/edm-practices-notes</link><description>&lt;p&gt;在做邮件发送服务的时候遇到了种种问题，发现邮件发送有很多技术之外的限制。这里把这些时间查资料和实践出来的一些经验总结在这里。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Tue, 22 Mar 2016 22:16:23 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2016-03-22:/edm-practices-notes</guid></item><item><title>logrotate机制和原理</title><link>http://www.lightxue.com/how-logrotate-works</link><description>&lt;p&gt;日志实在是太有用了，它记录了程序运行时各种信息。通过日志可以分析用户行为，记录运行轨迹，查找程序问题。可惜磁盘的空间是有限的，就像飞机里的黑匣子，记录的信息再重要也只能记录最后一段时间发生的事。为了节省空间和整理方便，日志文件经常需要按时间或大小等维度分成多份，删除时间久远的日志文件。这就是通常说的日志滚动(log rotation)。&lt;/p&gt;
&lt;p&gt;最近整理nginx日志，用了一个类Unix系统上的古老工具——logrotate，发现意外的好用。想了解这个工具的用法推荐看&lt;a href="http://www.thegeekstuff.com/2010/07/logrotate-examples/"&gt;这里&lt;/a&gt;。我了解了一下这个工具的运行机制和原理，觉得挺有趣的。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Thu, 23 Jul 2015 02:09:49 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2015-07-23:/how-logrotate-works</guid><category>Linux</category><category>shell</category></item><item><title>使用PLY编写多功能计算器</title><link>http://www.lightxue.com/write-swisscalc-by-ply</link><description>&lt;p&gt;最近用&lt;a href="http://www.dabeaz.com/ply/ply.html"&gt;PLY&lt;/a&gt;(Python Lex-Yacc)写了个Vim插件：&lt;a href="https://github.com/lightxue/SwissCalc"&gt;SwissCalc&lt;/a&gt;。借这个机会复习了下编译原理的一些知识。下面介绍一下用PLY写SwissCalc的过程吧。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Sun, 24 Nov 2013 22:00:52 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2013-11-24:/write-swisscalc-by-ply</guid></item><item><title>Python中对象、类型、元类之间的关系</title><link>http://www.lightxue.com/relationship-among-object-class-metaclass-in-python</link><description>&lt;p&gt;Python里的对象、类型和元类的关系很微妙也很有意思。&lt;/p&gt;
&lt;p&gt;1989年圣诞节期间，&lt;a href="http://www.python.org/~guido/"&gt;上帝&lt;/a&gt;很无聊，于是创造了一个世界。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Fri, 01 Nov 2013 23:29:48 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2013-11-01:/relationship-among-object-class-metaclass-in-python</guid><category>Python</category></item><item><title>Python判断整数相加溢出</title><link>http://www.lightxue.com/python-integer-overflow</link><description>&lt;p&gt;在Python解释器的源码里看到一段有趣的代码，它实现了Python两个整数相加时如果溢出则用更大的数据类型保存整数。具体代码的如下。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Light Xue</dc:creator><pubDate>Sat, 13 Jul 2013 22:50:32 +0800</pubDate><guid isPermaLink="false">tag:www.lightxue.com,2013-07-13:/python-integer-overflow</guid><category>Python</category><category>C</category><category>algorithm</category></item></channel></rss>