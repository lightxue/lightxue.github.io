<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 0xFEE1C001]]></title>
  <link href="http://lightxue.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://lightxue.github.io/"/>
  <updated>2015-06-17T12:33:51+08:00</updated>
  <id>http://lightxue.github.io/</id>
  <author>
    <name><![CDATA[Light Xue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用PLY编写多功能计算器]]></title>
    <link href="http://lightxue.github.io/write-swisscalc-by-ply"/>
    <updated>2013-11-24T22:00:52+08:00</updated>
    <id>http://lightxue.github.io/write-swisscalc-by-ply</id>
    <content type="html"><![CDATA[<p>最近用<a href="http://www.dabeaz.com/ply/ply.html">PLY</a>(Python Lex-Yacc)写了个Vim插件：<a href="https://github.com/lightxue/SwissCalc">SwissCalc</a>。借这个机会复习了下编译原理的一些知识。下面介绍一下用PLY写SwissCalc的过程吧。</p>

<!--more-->


<h2>程序结构</h2>

<p>程序分成3个部分</p>

<ul>
<li>计算器(autoload/swisscalc.py)</li>
<li>内置函数(autoload/builtin.py)</li>
<li>用户自定义函数(autoload/custom.py)</li>
</ul>


<p>这里主要分析计算器部分。</p>

<p>计算器部分有两个类：Parser和Calc。Parser是Calc的父类，对外提供计算器接口，处理一些传入参数，决定一些中间文件的路径等等。Calc是计算器的主要逻辑，一部分负责解释表达式，一部分负责管理计算器内部的逻辑，比如变量命令空间、函数命名空间、环境变量。Calc是计算器最有趣的地方。词法、语法解释就在解释表达式的部分。</p>

<h2>词法解析</h2>

<p>词法解析是把表达式(字符序列)识别成token序列。比如<code>v=13+13</code>经过记法解析会变成<code>v</code> <code>=</code> <code>13</code> <code>+</code> <code>13</code>。词法解析的过程归根结底是自动机扫描字符串。幸运的是现在的词法解析工具都不需要直接写自动机，大都是用正则表达式，PLY也一样。</p>

<p>PLY的词法解析在SwissCalc里这么用。</p>

<p>1.Parser里创建lexer对象，把lexer的命名空间指向类的命令空间。
<code>python
self.lexer = lex.lex(module=self, debug=self.debug)
</code></p>

<p>2.在Calc中，指定token的类型。
```python
tokens = (</p>

<pre><code>'ident',
'newline',
'binint', 'octint', 'hexint', 'decint',
'string',
'pointfloat', 'exponentfloat',
'add', 'subtract', 'multiply', 'divide',
'modulo', 'power', 'factorial',
'lshift', 'rshift', 'and', 'not', 'or', 'xor',
'assign',
'addassign', 'subassign', 'mulassign', 'divassign',
'modassign', 'powassign',
'lsftassign', 'rsftassign',
'andassign', 'orassign', 'xorassign',
'lparen', 'rparen', 'comma',
</code></pre>

<p>)
```</p>

<p>这里的变量名<code>tokens</code>是固定的，别的名字PLY不认。</p>

<p>3.每种token类型写上对应的正则表达式。
```python
t_ignore = &lsquo; \t&rsquo;
t_ident = r'[a-zA-Z<em>][a-zA-Z0-9</em>]*'</p>

<p>def t_hexint(self, t):</p>

<pre><code>r'0[xX][0-9a-fA-F]+'
t.value = int(t.value, 16)
return t
</code></pre>

<p><em>escapeseq = r'\.&lsquo;
</em>stringchar = (r"[^\&rsquo;]&ldquo;, r'[^\&rdquo;]&lsquo;)
<em>singlequote = &ldquo;&rsquo;(%s|%s)*&lsquo;&rdquo; % (</em>escapeseq, <em>stringchar[0])
</em>doublequote = &rsquo;&ldquo;(%s|%s)*&rdquo;&lsquo; % (<em>escapeseq, </em>stringchar[1])
<em>string = r&rsquo;[rR]?((%s)|(%s))&lsquo; % (</em>singlequote, <em>doublequote)
@TOKEN(</em>string)
def t_string(self, t):</p>

<pre><code>if t.value[0] in 'rR':
    t.value = t.value[2:-1]
else:
    t.value = t.value[1:-1].decode('string-escape')
return t
</code></pre>

<p>def t_error(self, t):</p>

<pre><code>t.lexer.skip(1)
raise SyntaxError("illegal character '%s'" % (t.value[0]))
</code></pre>

<p>&hellip;
```</p>

<p>这里变量名一样是有要求的。上面<code>tokens</code>里的类型名前面加上<code>t_</code>就是这个类型对应正则表达式的变量名。PLY会通过反射来查找这些变量。像<code>t_ident</code>是变量名的表达式，符合这个正则的字符串会被切出来当变量名。切出来的数据还是字符串。</p>

<p>如果有些特殊需求，比如想让token类型是整数，那么就不能像<code>t_ident</code>那样只写正则表达式了，要像<code>t_hexint</code>那样写成函数。函数的docstring还是正则表达式，token是函数的返回值。这样在函数里就能把字符串类型转成整型了。像行号计数、错误处理都可以用函数去实现。</p>

<p>如果正则表达式比较复杂，写docstring不方便，可以像<code>t_string</code>那样，先把正则表达式拼接好，然后再用<code>@TOKEN(_string)</code>设置<code>t_string</code>的正则表达式。</p>

<p><code>t_ignore</code>是PLY内置的token类型，这种token在解析到的时候会被丢弃。<code>t_error</code>函数词法解析错误的时候调用。</p>

<p>经过这3个步骤词法分析就做好了。这个过程写正则挺有意思的。像字符串的表达式怎么识别内部有转义的引号这种有趣的问题是会有的(没有开玩笑哦，这个计算器是支持字符串的)。Parser里有个函数叫<code>_lexme</code>，参数是表达式，结果是token序列。如果有兴趣可以用它了解一下词法分析的输入和输出。</p>

<h2>语法解析</h2>

<p>语法解析是写SwissCalc最爽的一部分。语法解析是根据token序列解析出语法树。有了语法树，对表达式的语义分析就容易很多了。如果不用PLY，自己手写语法分析还是挺有挑战的(如果打算这么做，推荐使用<a href="http://en.wikipedia.org/wiki/Recursive_descent_parser">递归下降法</a>，可操作性比较强)。用PLY整个语法解析的工作变得轻松不少，基本上只要操作产生式就行。根据产生式分析表达式过程PLY包办了，这是语法解析最复杂的部分，有很多坑。这里要感谢一下PLY，不然写个计算器都不知道要花我多少时间。</p>

<p>PLY支持<a href="http://en.wikipedia.org/wiki/Recursive_descent_parser">LALR</a>和<a href="http://en.wikipedia.org/wiki/Simple_LR_parser">SLR</a>，默认使用LALR，SwissCalc也是用的LALR。LALR和SLR怎么实现的我半懂不懂，感兴趣可以翻翻龙书，如果能翻得下去的话……</p>

<p>写<a href="http://en.wikipedia.org/wiki/Formal_grammar">产生式</a>也是件很有趣的事。PLY产生式用的<a href="http://en.wikipedia.org/wiki/BNF_grammar">BNF</a>，这里不详细介绍了。写产生式花了我一些时间，因为计算机到底需要哪些语法，功能要支持到什么程度就在这时候决定了。要让计算器强大一些，又要适当控制使用的复杂度，很多东西需要取舍。写完产生式其实计算器要做成什么样已经非常清晰了。</p>

<p>PLY的语法分析使用分这几个步骤。</p>

<p>1.在Parser里初始化yacc。
```python
yacc.yacc(module=self,</p>

<pre><code>      debug=self.debug,
      debugfile=self.debugfile,
      tabmodule=self.tabmodule,
      outputdir=self.basedir)
</code></pre>

<p>```</p>

<p>2.编写产生式，像这样的。
```python
expression : expression add expression</p>

<pre><code>       | expression subtract expression
       | expression multiply expression
       | expression divide expression
       | expression or expression
       | expression xor expression
       | expression and expression
       | expression lshift expression
       | expression rshift expression
       | expression modulo expression
       | expression power expression
</code></pre>

<p>expression : float</p>

<pre><code>       | ident
</code></pre>

<p>float      : pointfloat</p>

<pre><code>       | exponentfloat
</code></pre>

<p>```</p>

<p>注意，产生式出来的语法树，叶子节点肯定要是词法解析的token，比如上面的<code>ident</code> <code>pointfloat</code> <code>exponentfloat</code>。</p>

<p>3.指定运算符的结合性和优先级。</p>

<p>结合性举个例子。<code>2 ** 2 ** 3</code>，如果是这么算<code>(2 ** 2) ** 3</code>，结果是64，那么<code>**</code>是左结合的。如果<code>2 ** (2 ** 3)</code>结果是256，那么<code>**</code>是右结合的。结合性的指定决定了LALR解析时遇到同优先级的操作符是要shift还是要reduce。</p>

<p>优先级就不多说了，像我上面那么写<code>expression</code>，需要指定乘法比加法优先级高才能确保<code>2 + 2 * 3</code>这样的表达式结果是8而不是12。</p>

<p>结合性和优先级像下面这么指定。同理，变量名<code>precedence</code>是固定的。优先级从低到高，同一个元组内的操作级等级相同，元组第一个元素是结合性。
```python
precedence = (</p>

<pre><code>('left', 'and', 'or', 'xor'),
('left', 'lshift', 'rshift'),
('left', 'add', 'subtract'),
('left', 'multiply', 'divide', 'modulo'),
('right','usub', 'uadd', 'not'),
('left', 'factorial'),
('left', 'power'),
)
</code></pre>

<p>```</p>

<p>4.每一条产生式编写对应的函数，做语义分析。
```python
def p_expression_binop(self, p):</p>

<pre><code>'''
expression : expression add expression
           | expression subtract expression
           | expression multiply expression
           | expression divide expression
           | expression or expression
           | expression xor expression
           | expression and expression
           | expression lshift expression
           | expression rshift expression
           | expression modulo expression
           | expression power expression
'''
if p[2] == '/':
    p[3] = float(p[3])

if p[2] in self.common_binops:
    p[0] = self.common_binops[p[2]](p[1], p[3])
else:
    p[0] = self.int_binops[p[2]](int(p[1]), int(p[3]))
</code></pre>

<p>```</p>

<p>像上面这个函数，函数名无所谓，但必须要有<code>p_</code>开头，参数必须 只有一个，docstring是产生式。参数<code>p</code>就像个元组一样，从0开始顺序对应表达式里的各个单词。上面的函数，就是计算器里的二元操作，<code>p[0]</code>保存计算结果，<code>p[2]</code>是运算符，<code>p[1]</code>和<code>p[3]</code>是需要操作的数。</p>

<p><code>p_error</code>在语法解析错误的时候会调用，在里面做一些错误处理。</p>

<p>以上4步就能把语法解析的工作做完了。设定SwissCalc世界观还是相当愉悦的。</p>

<h2>其它</h2>

<p>做完词法、语法解析的工作，计算器基本完工了。SwissCalc有一些特别的功能，值得说一下。</p>

<h3>命名空间</h3>

<p>SwissCalc的变量和函数命名空间各用一个字典来实现。内置函数和用户自定义函数用这种方式导进来。
```python
import builtin
import custom</p>

<p>self.funcs[&lsquo;vars&rsquo;] = self.show_names
self.funcs[&lsquo;funcs&rsquo;] = self.show_funcs
self.funcs[&lsquo;ff&rsquo;] = self.find_func
self.funcs[&lsquo;find_func&rsquo;] = self.find_func
self.funcs[&lsquo;env&rsquo;] = self.env
self.funcs[&lsquo;setenv&rsquo;] = self.setenv
self.funcs[&lsquo;help&rsquo;] = self.helper</p>

<p>self.funcs.update(builtin.funcs)
cusfuncs = {var : getattr(custom, var)</p>

<pre><code>            for var in dir(custom)
                if callable(getattr(custom, var))}
</code></pre>

<p>self.funcs.update(cusfuncs)
```</p>

<p>上面代码中的<code>vars</code> <code>funcs</code> <code>help</code>等都是一些需要操作变量和函数的命名空间的函数，以提供一些自省的功能。比如<code>help</code>能看函数的帮助。
```python
def helper(self, func):</p>

<pre><code>'''
help(func_name)

print the document of the function which name is func_name
'''
if func not in self.funcs:
    raise SyntaxError('function: %s not found' % func)
doc = self.funcs[func].__doc__
if doc:
    print doc
</code></pre>

<p>```</p>

<h3>整数截断</h3>

<p>Python的整数精度是无限大的，只要内存存得下。但是SwissCalc为了模拟整数运算溢出的情况，要把整数截断成用户定义的字长。
```python
def truncint(self, val):</p>

<pre><code>val = int(val)
signed = int(self._env['signed'] &gt; 0)
bits = 1 &lt;&lt; (self._env['word'] * 8)
return (val &amp; (bits - 1)) - bool(val &amp; (bits &gt;&gt; 1)) * signed * bits
</code></pre>

<p>```</p>

<h3>重定向标准输出</h3>

<p>内置函数和用户自定义函数有可能需要标准输出。但是SwissCalc是Vim插件，直接操作标准输出是不会输出到Vim的buffer里的。需要把标准输出的数据接住，然后用Vim提供的方式放到Vim的buffer里。
```python
import cStringIO</p>

<p>try:</p>

<pre><code>sys.stdout = mystdout = cStringIO.StringIO()
self.exeval = ''
yacc.parse(s)
</code></pre>

<p>except SyntaxError as err:</p>

<pre><code>self.exeval = 'SyntaxError: %s' % (err)
</code></pre>

<p>except Exception as err:</p>

<pre><code>self.exeval = 'RuntimeError: %s' % (err)
</code></pre>

<p>sys.stdout = sys.<strong>stdout</strong>
outstr = mystdout.getvalue()
```</p>

<h2>总结</h2>

<p>以上就是怎么用PLY实现<a href="https://github.com/lightxue/SwissCalc/tree/v1.0.0">SwissCalc v1.0.0</a>(1.0.0? 我这么懒难道还会有更高版本吗？)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中对象、类型、元类之间的关系]]></title>
    <link href="http://lightxue.github.io/relationship-among-object-class-metaclass-in-python"/>
    <updated>2013-11-01T23:29:48+08:00</updated>
    <id>http://lightxue.github.io/relationship-among-object-class-metaclass-in-python</id>
    <content type="html"><![CDATA[<p>Python里的对象、类型和元类的关系很微妙也很有意思。</p>

<p>1989年圣诞节期间，<a href="http://www.python.org/~guido/">上帝</a>很无聊，于是创造了一个世界。</p>

<!--more-->


<h2>对象</h2>

<p>在这个世界的运转有几条定律。</p>

<blockquote><p>1.一切都是对象</p></blockquote>

<p>对象(object)是这个世界的基本组成单位，所有的的事物都由对象构成。</p>

<p>什么是对象？不同的语言对对象的定义不尽相同。在Python的世界里，对象是数据的一种抽象表示。如果看了Python源码，事情就很好解释了，所有能通过PyObject类型的指针访问的都是对象。整数、字符串、元组、列表、字典、函数、模块、包，栈等都是对象。</p>

<p><a href="http://www.python.org/doc/">圣经</a>中<a href="http://docs.python.org/2/reference/datamodel.html#objects-values-and-types">提到</a>，</p>

<blockquote><p>2.所有对象都有三种特性: id、类型、值</p></blockquote>

<p>id是一个对象的编号，每个对象天生都有一个与众不同的编号(目前实现是对象的地址).用<code>id()</code>能看到对象的id
```python</p>

<blockquote><blockquote><blockquote><p>id(1)
140657675012776
```</p></blockquote></blockquote></blockquote>

<p>每个对象都会有类型(type)，类型就像是商品上印的生产厂商一样，标识自己被谁生产出来。用<code>type()</code>可以看到对象的类型
```python</p>

<blockquote><blockquote><blockquote><p>type(1)
<type 'int'>
class A(object): pass
&hellip;
a = A()
type(a)
<class '__main__.A'>
```</p></blockquote></blockquote></blockquote>

<p>值是对象的价值所在。各种各样的对象保存着各种各样的值，Python的世界才会如此多彩。有的对象值永远不会变，叫不可变对象(immutable)；有的对象值可以变，叫可变对象(mutable)。</p>

<p>再说一次：Python世界里，一切都是对象</p>

<h2>类型</h2>

<p>类(class)就是生产出对象的模具(本文只讨论<a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes">new-style class</a>，classic class不在讨论范围内)。上面说到，每个对象天生都会有个铭牌，写着自己的类型。在Python里，类(class)和型(type)指的是同一件东西。汉字真是精妙，类和型放在一块念是多么的自然。</p>

<blockquote><p>3.每个对象都是由对应的类创建出来的</p></blockquote>

<p>由这个定律很容易理解上文说到的，每个对象都有对应类型。类很像工厂里生产产品的模具，它负责对象的创建，决定了对象将被塑造成什么样，有什么属性、函数。</p>

<p>类可以继承和派生。虽然有点勉强，但姑且这么理解吧。类型B继承类型A，就像相当于模具B是以模型A为原型做出来的。生产出模具B的不是模具A，但模具B是模仿模具A而生产出来的，模具B生产出来的对象拥有模具A生产出来的对象类似的特性。模具B如果以模具A为原型生产出来，模具B身上会络上模具A的版权标识(☺就当做版权保护吧)。用<code>B.__bases__</code>可以看模具B的印记。聪明的你可能已经注意到了，bases是复数，也就是说模具B可以以多个模具为原型，即多重继承。
```python</p>

<blockquote><blockquote><blockquote><p>class A(object): pass
&hellip;
class B(A): pass
&hellip;
A.<strong>bases</strong>
(<type 'object'>,)
B.<strong>bases</strong>
(<class '__main__.A'>,)
```</p></blockquote></blockquote></blockquote>

<p>这里注意，模具的版权标识跟对象的类型不一样。每个对象都会有类型，表示自己是哪个模具生产出来的。而模具的版权标识只有模具才会有，标识表示的是这个模具的设计原型哪个模具，并不表示这个模具是由这个原理模具生产出来的。</p>

<p>这里必须要提一下一个特殊的模具，堪称模具之母的模具：object。这个object不是上文说的对象，上文的对象是一个抽象的概念，这里的object是一个具体的模具。所有的模具(除了object自己)沿着印记向上追溯，最后肯定到object。也就是说，所有除了object自己以外的类，都直接或间接地继承了object，无论是内置的(buit-in)还是自定义的(user-defined)。另一方面看，所有对象都直接或间接由模具object生产出来。如果有兴趣的话，用<code>type()</code>把想查看对象的类型找到，再用<code>__baess__</code>向上查找，最后肯定会到object。从源码的角度看，object就是上文提到的PyObject。这跟Python里所有的对象都能用PyObject的指针访问是有关系的。</p>

<h2>元类</h2>

<p>定律1说到，一切都是对象，类型也是对象。相比很多语言，这一点非常特别。
```python</p>

<blockquote><blockquote><blockquote><p>id(A)
140548933792976
type(A)
<type 'type'>
dir(A)
[&lsquo;<strong>class</strong>&rsquo;, &lsquo;<strong>delattr</strong>&rsquo;, &lsquo;<strong>dict</strong>&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>format</strong>&rsquo;, &lsquo;<strong>getattribute</strong>&rsquo;, &lsquo;<strong>hash</strong>&rsquo;, &lsquo;<strong>init</strong>&rsquo;, &lsquo;<strong>module</strong>&rsquo;, &lsquo;<strong>new</strong>&rsquo;, &lsquo;<strong>reduce</strong>&rsquo;, &lsquo;<strong>reduce_ex</strong>&rsquo;, &lsquo;<strong>repr</strong>&rsquo;, &lsquo;<strong>setattr</strong>&rsquo;, &lsquo;<strong>sizeof</strong>&rsquo;, &lsquo;<strong>str</strong>&rsquo;, &lsquo;<strong>subclasshook</strong>&rsquo;, &lsquo;<strong>weakref</strong>&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p>可以看到，类型也像其他对象那样，有id，有类型，有值。它可以当变量、类成员、函数参数。有意思吧？更有意思的在后头。</p>

<p>定律3说到，任何对象都是由类型创建出来的。那类型这种对象是由谁创建出来的呢？继续拿模具来说，生产模具的模具是谁呢？模具的模具：元类(metaclass)。元类跟其它模具不同之处在于，它生产出来的是不是一般的对象，是模具。是不是很神奇？有了元类我们就可以在程序运行时动态生成类了。我们可以根据各种数据和配置，动态地定制我们所需要的类。这里不讨论元类的使用方法。不过元类除了能生产模具之外，跟其它模具相比无其它特别的地方。</p>

<p>有趣的问题又来了，根据定律1，元类也是对象吧，元类是谁生产出来的？元类是模具，生产模具的模具还是元类，所以元类的类型也应该是元类。继续追问下去，元类的元类的元类也是元类……这么追溯到源头(再强调一下，本文只讨论new-style class)，就是一个特殊的元类：type。什么？type不是个查看类型的函数吗？通过<code>help(type)</code>可以知道，type是个类。<code>type()</code>如果传1个对象进去，type会返回这个对象的类型，这是我们熟知的用法；如果传3个对象进去，会生产出一个新的类出来。为什么会把两个功能放到一个类里做呢？可能是历史原因吧。再追问下去，这个终极的元类的类型是什么呢？上帝为了世界设定的统一，使type的类型是它自己。模具把自己生产出来了？这个下面讨论。</p>

<p>type引来的问题不只这些。
```python</p>

<blockquote><blockquote><blockquote><p>object
<type 'object'>
type
<type 'type'>
type(object)
<type 'type'>
type(type)
<type 'type'>
type.<strong>bases</strong>
(<type 'object'>,)
```</p></blockquote></blockquote></blockquote>

<p>我们看到，type这个模具是object为原型造的，而生产object的模具却是type。鸡先生蛋还是蛋先生鸡？Python这个世界是运行在虚拟机上的。世界创建之初虚拟机就把type和object都造出来了。object一出世，生产的模具就写着是type；type一出世，模板的版权印记就记着object。他们一开始就存在了，无所谓谁先谁后。同理，type是不是自己把自己创建也来的问题也一样。</p>

<h2>总结</h2>

<p><img src="/images/python_types_map.png" title="对象、类型、元类之间的关系" alt="对象、类型、元类之间的关系" /></p>

<p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html">此文</a>把对象、类型、元类的关系画成了这幅图。三个框分别表示元类、类型、一般对象。把虚线看成产品与模具的关系，实线看成模具与原型的关系，是不是一目了然？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python断整数相加溢出]]></title>
    <link href="http://lightxue.github.io/python-integer-overflow"/>
    <updated>2013-07-13T22:50:32+08:00</updated>
    <id>http://lightxue.github.io/python-integer-overflow</id>
    <content type="html"><![CDATA[<p>在python解释器的源码里看到一段有趣的代码，它实现了python两个整数相加时如果溢出则用更大的数据类型保存整数。具体代码的如下。</p>

<!--more-->


<p>```c
// python解释器是C语言实现的
static PyObject *
int_add(PyIntObject <em>v, PyIntObject </em>w)
{</p>

<pre><code>register long a, b, x;
CONVERT_TO_LONG(v, a);
CONVERT_TO_LONG(w, b);
/* casts in the line below avoid undefined behaviour on overflow */
x = (long)((unsigned long)a + b); // 重点是这行
if ((x^a) &gt;= 0 || (x^b) &gt;= 0)     // 和这行
    return PyInt_FromLong(x);
return PyLong_Type.tp_as_number-&gt;nb_add((PyObject *)v, (PyObject *)w);
</code></pre>

<p>}
```</p>

<p><code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>如果是false，就是发生了溢出。这段代码咋看跟溢出没关系，细看还是挺有名堂的。这个if要判断的是符号位。我们知道，整型的最后一个bit如果是0，那么这个数大于等于0；如果是1，这个数小于0。这个表达式的<code>&gt;= 0</code>判断的就是是否最后一个bit是否是0。</p>

<p>我们知道，^是异或运算：</p>

<p><code>c
0 ^ 0 == 0
0 ^ 1 == 1
1 ^ 0 == 1
1 ^ 1 == 0
</code></p>

<p>简而言之就是两个bit相同得0，两个bit不同得1。也就是说<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>判断的是x与a的符号位相同或x与b的符号位相同。换而言之，x只要跟a和b任意一个数的符号位相同则为true。这跟溢出有什么关系？</p>

<p>我们知道，一个long能表达的数的范围是有限制的，两个long相加的情况不外乎下面6种：</p>

<p>```c
//  没有溢出的情况
非负数 + 非负数 = 非负数
非负数 + 负数 = 负/非负数
负数 + 非负数 = 负/非负数
负数 + 负数 = 负数</p>

<p>// 溢出的情况
非负数 + 非负数 = 负数
负数 + 负数 = 非负数
```</p>

<p>可以看到，没有溢出的情况刚好x和a、b其中一个的符号位相同，而溢出的情况x跟a、b的符号位都不同。所以<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>就刚好能判断出来a+b有没有溢出。</p>

<p>好神奇，我和我的小伙伴们都惊呆了！</p>

<p>有个地方不提一下这个讨论就不完整了。大家可能都注意到代码中的注释了：casts in the line below avoid undefined behaviour on overflow。在<a href="http://en.wikipedia.org/wiki/Integer_overflow">wikipedia</a>上看到的解释是这样的：</p>

<blockquote><p>Since an arithmetic operation may produce a result larger than the maximum representable value, a potential error condition may result. In the C programming language, signed integer overflow causes undefined behavior, while unsigned integer overflow causes the number to be reduced modulo a power of two, meaning that unsigned integers &ldquo;wrap around&rdquo; on overflow.</p></blockquote>

<p>如果是a和b都是signed long，溢出后结果是不确定的，看编译器的实现。如果a或b是unsigned long(相加时另一个也会转成unsigned long)，相加结果再转回long跟上面讨论的6种情况就一样了。</p>

<p>最后留个问题吧，怎么判断两个数相减溢出了呢:&ndash;)</p>

<p>补充：</p>

<p>axu给了我另一种判断整数溢出的判断</p>

<p>```c
t = a + b;
if ((a&lt;0 == b&lt;0) &amp;&amp; (t&lt;0 != a&lt;0))</p>

<pre><code>// overflow
</code></pre>

<p>```</p>

<p>细看其实思路跟上面说的一样，于是弃之不理。望仔看到这段代码后竟然想到去优化这它。</p>

<p>```c
t = a + b;
if (((a<sup>b</sup>) >= 0) &amp;&amp; ((a<sup>t</sup>) &lt; 0))</p>

<pre><code>// overflow
</code></pre>

<p>```</p>

<p>确实比上面的解法有所提升。认真思考的心态值得学习，赞一下望仔。</p>
]]></content>
  </entry>
  
</feed>
