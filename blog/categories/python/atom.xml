<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 0xFEE1C001]]></title>
  <link href="http://lightxue.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://lightxue.github.io/"/>
  <updated>2014-06-13T00:09:21+08:00</updated>
  <id>http://lightxue.github.io/</id>
  <author>
    <name><![CDATA[Light Xue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python中对象、类型、元类之间的关系]]></title>
    <link href="http://lightxue.github.io/relationship-among-object-class-metaclass-in-python"/>
    <updated>2013-11-01T23:29:48+08:00</updated>
    <id>http://lightxue.github.io/relationship-among-object-class-metaclass-in-python</id>
    <content type="html"><![CDATA[<p>Python里的对象、类型和元类的关系很微妙也很有意思。</p>

<p>1989年圣诞节期间，<a href="http://www.python.org/~guido/">上帝</a>很无聊，于是创造了一个世界。</p>

<h1>对象</h1>

<p>在这个世界的运转有几条定律。</p>

<blockquote><p>1.一切都是对象</p></blockquote>

<p>对象(object)是这个世界的基本组成单位，所有的的事物都由对象构成。</p>

<p>什么是对象？不同的语言对对象的定义不尽相同。在Python的世界里，对象是数据的一种抽象表示。如果看了Python源码，事情就很好解释了，所有能通过PyObject类型的指针访问的都是对象。整数、字符串、元组、列表、字典、函数、模块、包，栈等都是对象。</p>

<p><a href="http://www.python.org/doc/">圣经</a>中<a href="http://docs.python.org/2/reference/datamodel.html#objects-values-and-types">提到</a>，</p>

<blockquote><p>2.所有对象都有三种特性: id、类型、值</p></blockquote>

<p>id是一个对象的编号，每个对象天生都有一个与众不同的编号(目前实现是对象的地址).用<code>id()</code>能看到对象的id
```python</p>

<blockquote><blockquote><blockquote><p>id(1)
140657675012776
```</p></blockquote></blockquote></blockquote>

<p>每个对象都会有类型(type)，类型就像是商品上印的生产厂商一样，标识自己被谁生产出来。用<code>type()</code>可以看到对象的类型
```python</p>

<blockquote><blockquote><blockquote><p>type(1)
<type 'int'>
class A(object): pass
&hellip;
a = A()
type(a)
<class '__main__.A'>
```</p></blockquote></blockquote></blockquote>

<p>值是对象的价值所在。各种各样的对象保存着各种各样的值，Python的世界才会如此多彩。有的对象值永远不会变，叫不可变对象(immutable)；有的对象值可以变，叫可变对象(mutable)。</p>

<p>再说一次：Python世界里，一切都是对象</p>

<h1>类型</h1>

<p>类(class)就是生产出对象的模具(本文只讨论<a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes">new-style class</a>，classic class不在讨论范围内)。上面说到，每个对象天生都会有个铭牌，写着自己的类型。在Python里，类(class)和型(type)指的是同一件东西。汉字真是精妙，类和型放在一块念是多么的自然。</p>

<blockquote><p>3.每个对象都是由对应的类创建出来的</p></blockquote>

<p>由这个定律很容易理解上文说到的，每个对象都有对应类型。类很像工厂里生产产品的模具，它负责对象的创建，决定了对象将被塑造成什么样，有什么属性、函数。</p>

<p>类可以继承和派生。虽然有点勉强，但姑且这么理解吧。类型B继承类型A，就像相当于模具B是以模型A为原型做出来的。生产出模具B的不是模具A，但模具B是模仿模具A而生产出来的，模具B生产出来的对象拥有模具A生产出来的对象类似的特性。模具B如果以模具A为原型生产出来，模具B身上会络上模具A的版权标识(☺就当做版权保护吧)。用<code>B.__bases__</code>可以看模具B的印记。聪明的你可能已经注意到了，bases是复数，也就是说模具B可以以多个模具为原型，即多重继承。
```python</p>

<blockquote><blockquote><blockquote><p>class A(object): pass
&hellip;
class B(A): pass
&hellip;
A.<strong>bases</strong>
(<type 'object'>,)
B.<strong>bases</strong>
(<class '__main__.A'>,)
```</p></blockquote></blockquote></blockquote>

<p>这里注意，模具的版权标识跟对象的类型不一样。每个对象都会有类型，表示自己是哪个模具生产出来的。而模具的版权标识只有模具才会有，标识表示的是这个模具的设计原型哪个模具，并不表示这个模具是由这个原理模具生产出来的。</p>

<p>这里必须要提一下一个特殊的模具，堪称模具之母的模具：object。这个object不是上文说的对象，上文的对象是一个抽象的概念，这里的object是一个具体的模具。所有的模具(除了object自己)沿着印记向上追溯，最后肯定到object。也就是说，所有除了object自己以外的类，都直接或间接地继承了object，无论是内置的(buit-in)还是自定义的(user-defined)。另一方面看，所有对象都直接或间接由模具object生产出来。如果有兴趣的话，用<code>type()</code>把想查看对象的类型找到，再用<code>__baess__</code>向上查找，最后肯定会到object。从源码的角度看，object就是上文提到的PyObject。这跟Python里所有的对象都能用PyObject的指针访问是有关系的。</p>

<h1>元类</h1>

<p>定律1说到，一切都是对象，类型也是对象。相比很多语言，这一点非常特别。
```python</p>

<blockquote><blockquote><blockquote><p>id(A)
140548933792976
type(A)
<type 'type'>
dir(A)
[&lsquo;<strong>class</strong>&rsquo;, &lsquo;<strong>delattr</strong>&rsquo;, &lsquo;<strong>dict</strong>&rsquo;, &lsquo;<strong>doc</strong>&rsquo;, &lsquo;<strong>format</strong>&rsquo;, &lsquo;<strong>getattribute</strong>&rsquo;, &lsquo;<strong>hash</strong>&rsquo;, &lsquo;<strong>init</strong>&rsquo;, &lsquo;<strong>module</strong>&rsquo;, &lsquo;<strong>new</strong>&rsquo;, &lsquo;<strong>reduce</strong>&rsquo;, &lsquo;<strong>reduce_ex</strong>&rsquo;, &lsquo;<strong>repr</strong>&rsquo;, &lsquo;<strong>setattr</strong>&rsquo;, &lsquo;<strong>sizeof</strong>&rsquo;, &lsquo;<strong>str</strong>&rsquo;, &lsquo;<strong>subclasshook</strong>&rsquo;, &lsquo;<strong>weakref</strong>&rsquo;]
```</p></blockquote></blockquote></blockquote>

<p>可以看到，类型也像其他对象那样，有id，有类型，有值。它可以当变量、类成员、函数参数。有意思吧？更有意思的在后头。</p>

<p>定律3说到，任何对象都是由类型创建出来的。那类型这种对象是由谁创建出来的呢？继续拿模具来说，生产模具的模具是谁呢？模具的模具：元类(metaclass)。元类跟其它模具不同之处在于，它生产出来的是不是一般的对象，是模具。是不是很神奇？有了元类我们就可以在程序运行时动态生成类了。我们可以根据各种数据和配置，动态地定制我们所需要的类。这里不讨论元类的使用方法。不过元类除了能生产模具之外，跟其它模具相比无其它特别的地方。</p>

<p>有趣的问题又来了，根据定律1，元类也是对象吧，元类是谁生产出来的？元类是模具，生产模具的模具还是元类，所以元类的类型也应该是元类。继续追问下去，元类的元类的元类也是元类……这么追溯到源头(再强调一下，本文只讨论new-style class)，就是一个特殊的元类：type。什么？type不是个查看类型的函数吗？通过<code>help(type)</code>可以知道，type是个类。<code>type()</code>如果传1个对象进去，type会返回这个对象的类型，这是我们熟知的用法；如果传3个对象进去，会生产出一个新的类出来。为什么会把两个功能放到一个类里做呢？可能是历史原因吧。再追问下去，这个终极的元类的类型是什么呢？上帝为了世界设定的统一，使type的类型是它自己。模具把自己生产出来了？这个下面讨论。</p>

<p>type引来的问题不只这些。
```python</p>

<blockquote><blockquote><blockquote><p>object
<type 'object'>
type
<type 'type'>
type(object)
<type 'type'>
type(type)
<type 'type'>
type.<strong>bases</strong>
(<type 'object'>,)
```</p></blockquote></blockquote></blockquote>

<p>我们看到，type这个模具是object为原型造的，而生产object的模具却是type。鸡先生蛋还是蛋先生鸡？Python这个世界是运行在虚拟机上的。世界创建之初虚拟机就把type和object都造出来了。object一出世，生产的模具就写着是type；type一出世，模板的版权印记就记着object。他们一开始就存在了，无所谓谁先谁后。同理，type是不是自己把自己创建也来的问题也一样。</p>

<h1>总结</h1>

<p><img src="/image/python_types_map.png" title="对象、类型、元类之间的关系" alt="对象、类型、元类之间的关系" /></p>

<p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html">此文</a>把对象、类型、元类的关系画成了这幅图。三个框分别表示元类、类型、一般对象。把虚线看成产品与模具的关系，实线看成模具与原型的关系，是不是一目了然？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python判断整数相加溢出]]></title>
    <link href="http://lightxue.github.io/python-integer-overflow"/>
    <updated>2013-07-13T22:50:32+08:00</updated>
    <id>http://lightxue.github.io/python-integer-overflow</id>
    <content type="html"><![CDATA[<h1></h1>

<p>在python解释器的源码里看到一段有趣的代码，它实现了python两个整数相加时如果溢出则用更大的数据类型保存整数。具体代码的如下。</p>

<p>```c
// python解释器是C语言实现的
static PyObject *
int_add(PyIntObject <em>v, PyIntObject </em>w)
{</p>

<pre><code>register long a, b, x;
CONVERT_TO_LONG(v, a);
CONVERT_TO_LONG(w, b);
/* casts in the line below avoid undefined behaviour on overflow */
x = (long)((unsigned long)a + b); // 重点是这行
if ((x^a) &gt;= 0 || (x^b) &gt;= 0)     // 和这行
    return PyInt_FromLong(x);
return PyLong_Type.tp_as_number-&gt;nb_add((PyObject *)v, (PyObject *)w);
</code></pre>

<p>}
```</p>

<p><code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>如果是false，就是发生了溢出。这段代码咋看跟溢出没关系，细看还是挺有名堂的。这个if要判断的是符号位。我们知道，整型的最后一个bit如果是0，那么这个数大于等于0；如果是1，这个数小于0。这个表达式的<code>&gt;= 0</code>判断的就是是否最后一个bit是否是0。</p>

<p>我们知道，^是异或运算：</p>

<p><code>c
0 ^ 0 == 0
0 ^ 1 == 1
1 ^ 0 == 1
1 ^ 1 == 0
</code></p>

<p>简而言之就是两个bit相同得0，两个bit不同得1。也就是说<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>判断的是x与a的符号位相同或x与b的符号位相同。换而言之，x只要跟a和b任意一个数的符号位相同则为true。这跟溢出有什么关系？</p>

<p>我们知道，一个long能表达的数的范围是有限制的，两个long相加的情况不外乎下面6种：</p>

<p>```c
//  没有溢出的情况
非负数 + 非负数 = 非负数
非负数 + 负数 = 负/非负数
负数 + 非负数 = 负/非负数
负数 + 负数 = 负数</p>

<p>// 溢出的情况
非负数 + 非负数 = 负数
负数 + 负数 = 非负数
```</p>

<p>可以看到，没有溢出的情况刚好x和a、b其中一个的符号位相同，而溢出的情况x跟a、b的符号位都不同。所以<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>就刚好能判断出来a+b有没有溢出。</p>

<p>好神奇，我和我的小伙伴们都惊呆了！</p>

<p>有个地方不提一下这个讨论就不完整了。大家可能都注意到代码中的注释了：casts in the line below avoid undefined behaviour on overflow。在<a href="http://en.wikipedia.org/wiki/Integer_overflow">wikipedia</a>上看到的解释是这样的：</p>

<blockquote><p>Since an arithmetic operation may produce a result larger than the maximum representable value, a potential error condition may result. In the C programming language, signed integer overflow causes undefined behavior, while unsigned integer overflow causes the number to be reduced modulo a power of two, meaning that unsigned integers &ldquo;wrap around&rdquo; on overflow.</p></blockquote>

<p>如果是a和b都是signed long，溢出后结果是不确定的，看编译器的实现。如果a或b是unsigned long(相加时另一个也会转成unsigned long)，相加结果再转回long跟上面讨论的6种情况就一样了。</p>

<p>最后留个问题吧，怎么判断两个数相减溢出了呢:&ndash;)</p>

<p>补充：</p>

<p>axu给了我另一种判断整数溢出的判断</p>

<p>```c
t = a + b;
if ((a&lt;0 == b&lt;0) &amp;&amp; (t&lt;0 != a&lt;0))</p>

<pre><code>// overflow
</code></pre>

<p>```</p>

<p>细看其实思路跟上面说的一样，于是弃之不理。望仔看到这段代码后竟然想到去优化这它。</p>

<p>```c
t = a + b;
if (((a<sup>b</sup>) >= 0) &amp;&amp; ((a<sup>t</sup>) &lt; 0))</p>

<pre><code>// overflow
</code></pre>

<p>```</p>

<p>确实比上面的解法有所提升。认真思考的心态值得学习，赞一下望仔。</p>
]]></content>
  </entry>
  
</feed>
