<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[0xFEE1C001]]></title>
  <link href="http://blog.lightxue.com/atom.xml" rel="self"/>
  <link href="http://blog.lightxue.com/"/>
  <updated>2016-03-23T02:05:49+08:00</updated>
  <id>http://blog.lightxue.com/</id>
  <author>
    <name><![CDATA[Light Xue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python源码寻宝记——地图篇]]></title>
    <link href="http://blog.lightxue.com/python-internals-locate-source-code"/>
    <updated>2016-03-22T23:44:21+08:00</updated>
    <id>http://blog.lightxue.com/python-internals-locate-source-code</id>
    <content type="html"><![CDATA[<p>如果读源码的方式是打开源码包，一个个文件，一行行开始读。这种阅读源码方式太枯燥了。另一种方式，对Python的设计有了基本的了解后，找感兴趣的部分去阅读。兴致高，目的性强，内容少，阅读的过程会轻松有趣得过。</p>

<p>对Python设计基本了解包括对总体架构设计，对象系统实现原理，字节码的生成和解释过程有大致的了解。哪天闲得不行，可以写写这方面的文章。</p>

<p>感兴趣的部分源码怎么找？这个就是此文的主题了——如何找到特定逻辑的源码。</p>

<!--more-->


<h2>下载源码</h2>

<p>Python官方给的下载源码的方式在<a href="https://docs.python.org/devguide/setup.html#getting-the-source-code">这里</a>。如果不想用Mercurial，也可以直接去<a href="https://www.python.org/downloads/">这里</a>下对应的版本的Gzipped source tarball。</p>

<h2>目录结构</h2>

<p>官方有源码目录的介绍，在<a href="https://docs.python.org/devguide/setup.html#directory-structure">这里</a>。重点说一下常见的目录。</p>

<ul>
<li>Grammar。EBNF描述的语法规则在这个目录下。</li>
<li>Include。整个解释器所有的头文件放在这个目录下。</li>
<li>Lib。纯Python实现的标准库。</li>
<li>Modules。C实现的标准库。</li>
<li>Objects。所有的内置类型的实现。</li>
<li>Python。Python虚拟机的核心代码。</li>
</ul>


<h2>源码定位</h2>

<p>感兴趣的地方不一样，定位的方式也不一样。介绍一下常见的几种。</p>

<h3>语法定义</h3>

<p>这个好说，去<code>Grammar</code>目录看语法规则吧。语法规则由Zephyr Abstract Syntax Definition Language定义，<a href="http://pages.cpsc.ucalgary.ca/~aycock/spark/">SPARK</a>解析的。</p>

<h3>内置对象</h3>

<p>找某个内置对象是怎么实现的，就直接去<code>Include</code>里看声明和<code>Object</code>看实现。</p>

<p>比如想知道<code>list.sort()</code>是怎么实现的。那么在<code>Include/listobject.h</code>里可以知道列表是怎么用<code>ob_item</code>表示数据的，在<code>Objects/listobject.c</code>的<code>list_methods</code>里看到了<code>sort()</code>是由<code>listsort()</code>实现的.<code>listsort()</code>的实现刚好也在<code>Objects/listobject.c</code>里。就这样找到了<code>list.sort()</code>的源码了。</p>

<h3>标准库</h3>

<p>想找标准库的实现，分两种情况。大部分情况，标准库是纯Python实现的。还有一小部分标准库是C实现的。</p>

<p>纯Python实现的标准库，可以不用直接去<code>Lib</code>下面找。Python内置了很好用的工具叫<code>inspect</code>。比如想知道<code>timeit.timeit()</code>的源码在哪，可以这么查。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">python</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">inspect</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">timeit</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">inspect</span><span class="o">.</span><span class="n">getsourcefile</span><span class="p">(</span><span class="n">timeit</span><span class="o">.</span><span class="n">timeit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>inspect</code>只对纯Python实现的库有效，拿C实现的标准库一点招没有。</p>

<p>C实现的标准库也有类似于<code>inspect</code>这种好用的方案，叫<a href="https://github.com/punchagan/cinspect">cinspect</a>，不过我没有尝试过。C的标准库不多，命名也比较容易懂。所以直接去<code>Modules</code>找一般很容易找到。</p>

<p>如果不想对着文件名猜某个模块是不是在这实现，就需要工具来帮忙了。这里推荐一下速度比<code>grep</code>快得多的<a href="http://beyondgrep.com/">ack</a>。举个例子，想找<code>time</code>的源码，可以执行这个命令。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; <span class="nb">cd </span>Modules
</span><span class='line'>&gt;
</span><span class='line'><span class="c"># Python 2</span>
</span><span class='line'>&gt; ack <span class="s1">&#39;Py_InitModule3\(&quot;time&quot;&#39;</span>
</span><span class='line'>timemodule.c
</span><span class='line'>854:    <span class="nv">m</span> <span class="o">=</span> Py_InitModule3<span class="o">(</span><span class="s2">&quot;time&quot;</span>, time_methods, module_doc<span class="o">)</span>;
</span><span class='line'>
</span><span class='line'><span class="c"># Python 3</span>
</span><span class='line'>&gt; ack <span class="s1">&#39;PyModuleDef&#39;</span> -A 5 | ack <span class="s1">&#39;&quot;time&quot;&#39;</span>
</span><span class='line'>timemodule.c-1331-    <span class="s2">&quot;time&quot;</span>,
</span></code></pre></td></tr></table></div></figure>


<p><code>Modules/timemodule.c</code>就是<code>time</code>模块实现的地方。<code>Py_InitModule3</code>是Python 2 注册模块的宏，<code>PyModuleDef</code>是Python 3 模块定义的结构体的名字。这两个地方都要填上模块名作参数向解释器注册模块。所以这么搜模块名，一搜一个准。</p>

<h3>语法实现</h3>

<p>想知道某个语法怎么实现的去哪找呢？这时候就要去解读字节码，找到对应语法的字节码，并去<code>ceval.c</code>看具体实现。</p>

<p>比如想看关键字<code>in</code>的实现，执行下面的代码可以看到<code>in</code>的字节码是<code>COMPARE_OP</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">exp</span> <span class="o">=</span> <span class="s">&#39;0 in (1, 2)&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">code</span> <span class="o">=</span> <span class="nb">compile</span><span class="p">(</span><span class="n">exp</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;eval&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">1</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">0</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CONST</span>               <span class="mi">3</span> <span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>              <span class="mi">6</span> <span class="n">COMPARE_OP</span>               <span class="mi">6</span> <span class="p">(</span><span class="ow">in</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">9</span> <span class="n">RETURN_VALUE</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体各个字节码的意思可以去<a href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions">这里</a>看解释。拿到了字节码后去<code>Python/ceval.c</code>里找<code>COMPARE_OP</code>的实现，会看到关键字<code>in</code>的实现在<code>PySequence_Contains</code>函数里。<code>ceval.c</code>里实现了字节码解析的eval loop，是整个源码中至关重要的部分。</p>

<h3>其它情况</h3>

<p>上面说的几种方法应该包含了大部分的情况，但也有些时候需要别的方法，比如找垃圾回收的实现。这里推荐一本深入剖析Python 2 源码的书，<a href="https://book.douban.com/subject/3117898/">《Python源码剖析》</a>。这本书详细介绍了Python源码里各个重要的地方，非常值得一看。</p>

<p>如果书里没有提到的地方，想快速定位源码位置，我的招式已经全部分用完了，剩下的只有问Google，问Stack Overflow，邮件大牛，或是自己去啃源码。</p>

<p>以上就是Python寻宝需要的地图。看这个系列更多文章，请到<a href="http://blog.lightxue.com/python-internals-introductory">Python源码寻宝记——挖坑不埋篇</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python源码寻宝记——挖坑不埋]]></title>
    <link href="http://blog.lightxue.com/python-internals-introductory"/>
    <updated>2016-03-22T23:34:21+08:00</updated>
    <id>http://blog.lightxue.com/python-internals-introductory</id>
    <content type="html"><![CDATA[<p>作为pythonista，不禁感慨Python的易用与强大。时不时会想，这个好用的语法是怎么实现的，那个神奇库是怎么回事。后来开始翻Python源码，读感兴趣的部分的实现时，像是找到了个四次元口袋。这里有奇思妙想的算法实现，也有精妙绝伦的性能优化，还有天马行空的语法原理。源码的风格也和Python所倡导的一样，简洁优雅，阅读的时候心情十分愉悦。</p>

<p>记下源码里有趣的地方，是件有意思的事。但按这个博客一直以来自娱自乐的尿性，注定了这个系列是只会把坑越挖越大。这里不要脸地承认了，这就是在挖坑。</p>

<!--more-->


<p>这个系列分析的Python源码版本是2.7.11和3.5.1，当前最新版。在<a href="https://www.python.org/downloads/">这里</a>可以找到下载链接。</p>

<p>本文的目的是灌水+挖坑+索引这系列文章。开始寻宝吧。</p>

<p><a href="http://blog.lightxue.com/python-internals-locate-source-code">Python源码寻宝记——地图</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邮件发送实践经验]]></title>
    <link href="http://blog.lightxue.com/edm-practices-notes"/>
    <updated>2016-03-22T22:16:23+08:00</updated>
    <id>http://blog.lightxue.com/edm-practices-notes</id>
    <content type="html"><![CDATA[<p>在做邮件发送服务的时候遇到了种种问题，发现邮件发送有很多技术之外的限制。这里把这些时间查资料和实践出来的一些经验总结在这里。</p>

<!--more-->


<h2>ESP</h2>

<p>邮件服务最重要的是把邮件送达给用户，这中间最大的困难是ESP(Email Service Provider)的反垃圾邮件的机制。</p>

<p>据统计互联网90%的邮件是垃圾邮件。</p>

<p>在国内，最饱受垃圾邮件骚扰也是用户量最大的ESP是QQ邮箱，反垃圾最严格的也是QQ邮箱。</p>

<h2>信誉度</h2>

<p>ESP的反垃圾策略是给邮件服务器评信誉度(reputation)。信誉度与邮件服务器的IP和域名都相关。</p>

<p>每个ESP的反垃圾策略都是他们的技术核心，不会向外界泄露。不过反垃圾关注的重点都是类似的。</p>

<p>发邮件的关键在于怎么提高信誉度，多做加分项，少做减分项。下面是几个监控信誉度的要点</p>

<ul>
<li>邮件是否都送达了</li>
<li>发送速率是否被ESP限制了</li>
<li>邮件是否因为错误地址退回</li>
<li>是否被用户标成垃圾邮件或退订</li>
<li>用户是否打开邮件，点开里面的链接</li>
</ul>


<h2>IP地址与发送量</h2>

<p>我最终决定把邮件托管到第三方邮件服务(mailgun)，很多事不用操心了。但有一些事要注意。</p>

<ul>
<li>域名和IP要固定，IP最好是IPv4</li>
<li>所在IP段要有好的信誉度，因为有些ESP会封整个IP段</li>
<li>国内IP很少，大部分IP被列入黑名单了，这一点上用国外IP反而更好</li>
</ul>


<p>mailgun有共享IP和独立IP。共享IP是指使用的IP是固定的，不过是与其他人一起使用这个IP。独立IP是指这个IP是专用的，不与他人共享。</p>

<p>使用共享IP和独立IP有个平衡点。如果发的量少用共享IP好一些，因为一个IP发送的邮件少，ESP会认为这个IP不是专门的邮件服务。</p>

<p>如果量太大，ESP也会认为是在发送垃圾邮件，这需要使用独立IP，甚至是多个独立IP。</p>

<p>mailgun推荐每周发送超过5万封邮件，应该使用独立IP；每天发送低于5000封，应该使用共享IP。mailgun主要针对的是国外的ESP，国内的需要考证。</p>

<p>共享IP的问题在于用这个IP的其他人的行为是不可控的。出现过共享IP的某个mailgun用户发垃圾邮件给QQ邮箱，导致QQ邮箱拒收我的邮件。反馈后mailgun很快帮我找了IP。</p>

<p>最好不同的业务使用不同的IP，这样低信誉度的业务不会影响到其它业务的发送。</p>

<p>有了一个新的IP，需要先“热身”。先发送低速度的邮件再逐渐增加发送速率。发送过程关注ESP的反馈
。如果一开始就发大量的邮件，ESP会拒收。我刚开始不知道，用10秒一封的速度发400多封邮件，有199封被QQ邮箱拒收了。后来有了换了新的IP，发送速率慢慢从10分钟一封，8分钟一封，5分钟一封地逐步提高，送达率为100%。</p>

<p>网易邮箱的建议是每小时不超过3000封，每天不超过10万封。</p>

<h2>域名</h2>

<p>不要拿主域名发送EDM，因为一但进了ESP黑名单，公司的正常邮件会受到影响。</p>

<p>跟IP一样，不同的业务用不同的子域名，不要互相影响。</p>

<p>邮件服务的域名和<code>from</code>字段里的域名最好一致。</p>

<p>DNS托管服务要有良好的信誉。</p>

<p>要设置反解域名。</p>

<p>域名保存的鉴权信息要完善。</p>

<p>WHOIS记录信息要完善。</p>

<p>MX记录要有效</p>

<h2>鉴权信息</h2>

<p><code>SPF</code>，<code>DKIM</code>，<code>DomainKeys</code>，<code>SenderID</code>，这些要设置，增加ESP的信任。</p>

<h2>邮件列表</h2>

<p>尽最大努力保证收件地址是有效的。</p>

<p>要有退订的功能。不然用户在ESP投诉后果很严重。</p>

<h2>ESP反馈</h2>

<p>维护邮件服务的信誉度很大程序是在正确处理拒收邮件。</p>

<p>很多ESP会在第一次退信的时候，把你加入灰名单或是对你限速。如果你还在不断向无效地址发邮件，完全不听ESP的反馈，ESP会把你的邮件过滤掉。</p>

<p>QQ邮件可以通过遍历号码来发邮件，所以他们对无效地址控制很严。</p>

<p>QQ邮箱有反馈环，设置好后有人点击举报会反馈给发邮件者。</p>

<p>QQ邮箱有他域互通的功能，在上面可以看到邮件的到达、阅读、删除和投诉的数据。</p>

<h2>收件人反馈</h2>

<p>收件人以下行为是积极的</p>

<ul>
<li>打开邮件</li>
<li>转发邮件</li>
<li>回复邮件</li>
<li>加到白名单</li>
<li>加到联系人</li>
<li>标星邮件</li>
<li>归档邮件</li>
<li>打开链接</li>
<li>鼠标滚动邮件页面</li>
<li>点击显示图片</li>
</ul>


<p>收件人以下行为是消极的</p>

<ul>
<li>举报垃圾邮件</li>
<li>删除邮件</li>
<li>移至垃圾箱</li>
<li>点击拒收</li>
<li>将发件人添加至黑名单</li>
<li>不打开邮件</li>
</ul>


<h2>邮件内容</h2>

<ul>
<li>根据用户个性化邮件内容</li>
<li>邮件最好text和html都有</li>
<li>链接、图片与文字的比例越小越好</li>
<li>不要有错别字</li>
<li>不建议用短url，邮件内容的链接域名要和发件人域名对应</li>
<li>A/B test优化</li>
<li>尽量避免发票、促销、免费、河蟹等关键字，奇怪符号，过多的红黄色、超大字体</li>
<li>简洁的html代码，td tr布局。不要有js代码，也不要加附件</li>
<li>邮件里的链接要安全合法</li>
</ul>


<p><strong>发送对用户有价值的内容</strong>是最重要的，其次才是技术问题。</p>

<h2>工具</h2>

<p>Return Path的信誉度查询 <a href="https://www.senderscore.org/">https://www.senderscore.org/</a></p>

<p>黑名单查询 <a href="http://mxtoolbox.com/">http://mxtoolbox.com/</a></p>

<hr />

<h4>参考</h4>

<p><a href="https://documentation.mailgun.com/best_practices.html">https://documentation.mailgun.com/best_practices.html</a></p>

<p><a href="http://feedback.mail.163.com/FeedBack/feedback.do?method=index">http://feedback.mail.163.com/FeedBack/feedback.do?method=index</a></p>

<p><a href="http://www.zhihu.com/question/19574247">http://www.zhihu.com/question/19574247</a></p>

<p><a href="http://www.zhihu.com/question/19883607">http://www.zhihu.com/question/19883607</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[logrotate机制和原理]]></title>
    <link href="http://blog.lightxue.com/how-logrotate-works"/>
    <updated>2015-07-23T02:09:49+08:00</updated>
    <id>http://blog.lightxue.com/how-logrotate-works</id>
    <content type="html"><![CDATA[<p>日志实在是太有用了，它记录了程序运行时各种信息。通过日志可以分析用户行为，记录运行轨迹，查找程序问题。可惜磁盘的空间是有限的，就像飞机里的黑匣子，记录的信息再重要也只能记录最后一段时间发生的事。为了节省空间和整理方便，日志文件经常需要按时间或大小等维度分成多份，删除时间久远的日志文件。这就是通常说的日志滚动(log rotation)。</p>

<p>最近整理nginx日志，用了一个类Unix系统上的古老工具——logrotate，发现意外的好用。想了解这个工具的用法推荐看<a href="http://www.thegeekstuff.com/2010/07/logrotate-examples/">这里</a>。我了解了一下这个工具的运行机制和原理，觉得挺有趣的。</p>

<!--more-->


<h2>运行机制</h2>

<p>logrotate在很多Linux发行版上都是默认安装的。系统会定时运行logrotate，一般是每天一次。系统是这么实现按天执行的。crontab会每天定时执行<code>/etc/cron.daily</code>目录下的脚本，而这个目录下有个文件叫<code>logrotate</code>。在centos上脚本内容是这样的：</p>

<figure class='code'><figcaption><span>/etc/cron.daily/logrotate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/usr/sbin/logrotate /etc/logrotate.conf &gt;/dev/null 2&gt;&amp;1
</span><span class='line'><span class="nv">EXITVALUE</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$EXITVALUE</span> !<span class="o">=</span> 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>    /usr/bin/logger -t logrotate <span class="s2">&quot;ALERT exited abnormally with [$EXITVALUE]&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>可以看到这个脚本主要做的事就是以<code>/etc/logrotate.conf</code>为配置文件执行了logrotate。就是这样实现了每天执行一次logrotate。</p>

<p>因为我的系统执行<code>/etc/cron.daily</code>目录下的脚本不是我想滚动日志的时间，所以我把<code>/etc/cron.daily/logrotate</code>拷了出来，改了一下logrotate配置文件的路径，然后在crontab里加上一条指定时间执行这个脚本的记录，自定义周期滚动日志就大功告成了。这种自定义的方式有两点要注意：</p>

<ol>
<li><p>配置文件里一定要配置<code>rotate 文件数目</code>这个参数。如果不配置默认是0个，也就是只允许存在一份日志，刚切分出来的日志会马上被删除。多么痛的领悟，说多了都是泪。</p></li>
<li><p>执行logrotate命令最好加<code>-f</code>参数，不然有时候配置文件修改的内容不生效。</p></li>
</ol>


<p>很多程序的会用到logrotate滚动日志，比如nginx。它们安装后，会在<code>/etc/logrotate.d</code>这个目录下增加自己的logrotate的配置文件。logrotate什么时候执行<code>/etc/logrotate.d</code>下的配置呢？看到<code>/etc/logrotate.conf</code>里这行，一切就不言而喻了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">include</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">logrotate</span><span class="p">.</span><span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>


<h2>原理</h2>

<p>logrotate是怎么做到滚动日志时不影响程序正常的日志输出呢？logrotate提供了两种解决方案。</p>

<h3>Linux文件操作机制</h3>

<p>介绍一下相关的Linux下的文件操作机制。</p>

<p>Linux文件系统里文件和文件名的关系如下图。</p>

<p><img src="http://blog.lightxue.com/images/how-logrotate-works/inodes.png" alt="" /></p>

<p>目录也是文件，文件里存着文件名和对应的inode编号。通过这个inode编号可以查到文件的元数据和文件内容。文件的元数据有引用计数、操作权限、拥有者ID、创建时间、最后修改时间等等。文件件名并不在元数据里而是在目录文件中。因此文件改名、移动，都不会修改文件，而是修改目录文件。</p>

<p>借《UNIX环境高级编程》里的图说一下进程打开文件的机制。</p>

<p><img src="http://blog.lightxue.com/images/how-logrotate-works/file_pointer.gif" alt="" /></p>

<p>进程每新打开一个文件，系统会分配一个新的文件描述符给这个文件。文件描述符对应着一个文件表。表里面存着文件的状态信息（<code>O_APPEND</code>/<code>O_CREAT</code>/<code>O_DIRECT</code>&hellip;）、当前文件位置和文件的inode信息。系统会为每个进程创建独立的文件描述符和文件表，不同进程是不会共用同一个文件表。正因为如此，不同进程可以同时用不同的状态操作同一个文件的不同位置。文件表中存的是inode信息而不是文件路径，所以文件路径发生改变不会影响文件操作。</p>

<h3>方案1：create</h3>

<p>默认方案没有名字，姑且叫它create吧。因为这个方案会创建一个新的日志文件给程序输出日志，而且第二个方案名copytruncate是个配置项，与create配置项是互斥的。</p>

<p>这个方案的思路是重命名原日志文件，创建新的日志文件。详细步骤如下：</p>

<ol>
<li><p>重命名程序当前正在输出日志的程序。因为重命名只会修改目录文件的内容，而进程操作文件靠的是inode编号，所以并不影响程序继续输出日志。</p></li>
<li><p>创建新的日志文件，文件名和原来日志文件一样。虽然新的日志文件和原来日志文件的名字一样，但是inode编号不一样，所以程序输出的日志还是往原日志文件输出。</p></li>
<li><p>通过某些方式通知程序，重新打开日志文件。程序重新打开日志文件，靠的是文件路径而不是inode编号，所以打开的是新的日志文件。</p></li>
</ol>


<p>什么方式通知程序我重新打开日志呢，简单粗暴的方法是杀死进程重新打开。很多场景这种作法会影响在线的服务，于是有些程序提供了重新打开日志的接口，比如可以通过信号通知nginx。各种IPC方式都可以，前提是程序自身要支持这个功能。</p>

<p>有个地方值得一提，一个程序可能输出了多个需要滚动的日志文件。每滚动一个就通知程序重新打开所有日志文件不太划得来。有个<code>sharedscripts</code>的参数，让程序把所有日志都重命名了以后，只通知一次。</p>

<h3>方案2：copytruncate</h3>

<p>如果程序不支持重新打开日志的功能，又不能粗暴地重启程序，怎么滚动日志呢？copytruncate的方案出场了。</p>

<p>这个方案的思路是把正在输出的日志拷(copy)一份出来，再清空(trucate)原来的日志。详细步骤如下：</p>

<ol>
<li><p>拷贝程序当前正在输出的日志文件，保存文件名为滚动结果文件名。这期间程序照常输出日志到原来的文件中，原来的文件名也没有变。</p></li>
<li><p>清空程序正在输出的日志文件。清空后程序输出的日志还是输出到这个日志文件中，因为清空文件只是把文件的内容删除了，文件的inode编号并没有发生变化，变化的是元信息中文件内容的信息。</p></li>
</ol>


<p>结果上看，旧的日志内容存在滚动的文件里，新的日志输出到空的文件里。实现了日志的滚动。</p>

<p>这个方案有两个有趣的地方。</p>

<ol>
<li><p>文件清空并不影响到输出日志的程序的文件表里的文件位置信息，因为各进程的文件表是独立的。那么文件清空后，程序输出的日志应该接着之前日志的偏移位置输出，这个位置之前会被<code>\0</code>填充才对。但实际上logroate清空日志文件后，程序输出的日志都是从文件开始处开始写的。这是怎么做到的？这个问题让我纠结了很久，直到某天灵光一闪，这不是logrotate做的，而是成熟的写日志的方式，都是用<code>O_APPEND</code>的方式写的。如果程序没有用<code>O_APPEND</code>方式打开日志文件，变会出现copytruncate后日志文件前面会被一堆<code>\0</code>填充的情况。</p></li>
<li><p>日志在拷贝完到清空文件这段时间内，程序输出的日志没有备份就清空了，这些日志不是丢了吗？是的，copytruncate有丢失部分日志内容的风险。所以能用create的方案就别用copytruncate。所以很多程序提供了通知我更新打开日志文件的功能来支持create方案，或者自己做了日志滚动，不依赖logrotate。</p></li>
</ol>


<h2>总结</h2>

<p>logrotate是个优秀的日志滚动工具，它是用蜂蜜，川贝，桔梗，加上天山雪莲配制而成，不须冷藏，也没有防腐剂，除了毒性猛烈之外，味道还很好吃。实在是居家旅行、杀人灭口必备良药！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[翻译]作为一个外国人，你对中国人怎么看？]]></title>
    <link href="http://blog.lightxue.com/as-a-foreigner-what-do-you-think-about-chinese-people"/>
    <updated>2015-06-19T01:26:18+08:00</updated>
    <id>http://blog.lightxue.com/as-a-foreigner-what-do-you-think-about-chinese-people</id>
    <content type="html"><![CDATA[<p>来自dyr热心的投稿，感谢对Quora这个高质量回答的翻译。以下是正文。</p>

<h4>Q: <a href="http://www.quora.com/As-a-foreigner-what-do-you-think-about-Chinese-People/">As a foreigner what do you think about Chinese People</a></h4>

<h4>A: <a href="http://www.quora.com/As-a-foreigner-what-do-you-think-about-Chinese-People/answer/Eric-Miller-17">Answer by Eric Miller</a></h4>

<p>翻译这个的目的仅仅是分享一些真正的“老外”的看法给我周围对英语阅读有困难或者偷懒的人，并不代表我完全赞同作者观点（虽然大部分我觉得说的还是有道理，至少是我见过的现象）</p>

<!--more-->


<p>问题： 作为一个外国人，你对中国人怎么看？</p>

<p>回答：（作者1988年第一次来到中国，之后往返多次，以下以作者口吻翻译）</p>

<p>Eric Miller:</p>

<p>让人如何回答这个问题呢？我当然发现了不同年代的人不一样——那些出生在50年代，70年代和90年代的人有着<em>相当</em>不同的人生经历。 尽管我很爱听（中国的）老一辈人向我追忆往事，但我也经历了一段相当困难的时间才充分地了解他们的生活。 我同样用了不少时间才理解了那些中国更为年轻的一代，他们见过的中国的变话比我见过的相对更少（我第一次来到中国是在1988年）。</p>

<p>“中国人”这个概念可以包含华裔美国人，台湾人以及香港人等等，他们都很不一样。</p>

<p>当然了，就个人来说，中国人同世界各地的人一样相互个体之间都有很大的差别。我不可能就我的经验作出任何具有普遍性的关于中国人的论断，但那不能阻止我作出一些我个人的概括。首先声明，我所说的这些（概括）不是源于种族差异，同样所有中国人身上也没有一种魔力版共同的“中国性”。</p>

<p>中国人很有礼貌。中国人是非常棒的主人，他们非常的慷慨并且关注客人是否（在做客期间）感到舒适。有时都有点像个美国人，而却我更喜欢一个人独处，但是不管怎么说，（做客时的）感觉很棒。作为一个外国人，我也花了很长时间来理解这背后的“真相”。他们（中国人）是真的不想要再来一份我做的非常棒的芝士蛋糕吗，还是说这仅仅是他们表现的礼貌？他们真的想让我再喝一杯茶吗，还是说他们仅仅是希望我赶紧离开？</p>

<p>中国人相当的消极，这一点适用于中国大陆。天啦撸。中国人都相信一切都有可能变得很糟糕，并且事情一定会变糟。这也让我过了很久才理解，虽然在过去的25年这种情形有了极大的改观，但是我总能听到各种消极绝望的声音。中国人也并不相信其他他们不了解的中国人。我对他们的信任比他们之间的相互信任还要强。他们告诉我不要这样（相信他人）。</p>

<p>总的来说，我发现中国人有一些肤浅，并不是所有的中国人只关心钱，但是我去商场的时候总能看见穿金戴银的人听到被包养的故事。 当然了，美国人也会相当的肤浅。但是中国有着极其丰富和极具底蕴的艺术和哲学传统，我希望有更多的人去深入它们。在中国，我倾向于与教授、艺术家、在国外生活过的人等在一起。</p>

<p>中国人很不自觉。（同美国人相比）他们能很开心的大声唱卡拉OK，即便自己唱得不好。他们会在公园里跳舞。男士可以骑着亮粉色有小马装饰的自行车去上班。他们会走上来抓住你毛绒绒的手臂。他们会在街中间停下并引起大规模堵车。他们会在宜家的家具上小睡。他们会大声的接打电话而不分场合。他们会完全无视禁烟标志而吸烟，哪怕标志就在眼前。这基本刷新了我的三观。有时我觉得像他们这样做是有些粗鲁的。（真的吗？你要把你的车停在这挡住那么多人吗？）当他们去美国时，他们必须更多的注意社会对他们行为的期望——美国是一个对这些行为更加敏感的地方。</p>

<p>我也并没有发现中国人有特别的顾家（估计现在我已经惹火了一堆人）。我看过他们一个关于食品的政府项目，里面将中国人表现成梦幻般的世界上最顾家的人。中国人的确关心他们的家庭，每个人会因为节假日不能回家而感到伤心。但是世界上所有人都这样。我的工作与研究是关于关爱老人的。事实是中国人的顾家并没有那么梦幻，通常（不能节假日回家）只是一般的难过罢了。对不起。（美国人也是被认为非常非常爱他们的孩子，但是有的人的确不是好的父母。）我的确发现了中国人认为他们非常的顾家，并且这对于与外国人打交道或者在外国生活的中国人来说是其中国标志性的一个重要方面。</p>

<p>在中国70年代城市出生的人群是我最了解的一个群体，我发现他们对自己的生活感到很不快乐。他们大部分都有家庭和工作，但是他们并不热爱自己的工作，他们经常思考是否应该离婚，他们讨厌他们的教育体制但是又觉得他们必须完全沿着那种机制走下去。他们的生活似乎有些空虚而没有意义。他们开始感到更多的钱并不能让自己更加幸福，但是又不知道该何去何从。（最幸福的一部分人已经有了自己的事业，并开始全国乃至全世界地旅游。）</p>

<p>我怎么看待中国人？我觉得他们就是普通的人，跟世界上其他地方的一样。他们大部分都很和蔼，对人很好，有些也很蠢。他们只是被在特殊的时间与地点被生存环境所困，而就是这造成了一些区别。</p>

<p>我希望不要认为我说这些是在贬低，我自己认为这些仅仅是一些归纳性——但是发自真心——的观察结果，并不能适用于每一个人。我对大家会如何评价我的观察表示期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于barrier]]></title>
    <link href="http://blog.lightxue.com/about-barriers"/>
    <updated>2015-04-10T16:50:24+08:00</updated>
    <id>http://blog.lightxue.com/about-barriers</id>
    <content type="html"><![CDATA[<p>再次收到John Smith的来稿，为了你这篇稿子，我停笔一年了呀。</p>

<p>memory barrier内存屏障，一种非常底层的同步原语，是memory ordering的一部分。
使用内存屏障可以阻止编译器或cpu对内存的乱序访问，其中阻止编译时期重排的叫做
compiler barrier，阻止运行时期重排的叫做memory barrier。</p>

<!-- more -->


<h2>一. compiler barrier</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define barrier()   __asm__ __volatile__(&quot;&quot;:::&quot;memory&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>看开源项目代码可能偶尔会看上面这样的内嵌汇编:</p>

<ol>
<li>内嵌汇编的格式为<code>__asm__</code> (&ldquo;asm statement&rdquo; : outputs : inputs : registers-modified)</li>
<li><code>__asm__</code>用于提示编译器在这里插入汇编代码</li>
<li><code>__volatile__</code>用于告诉编译器，严禁将此处的汇编代码和其他语句进行重排优化，所得即所见</li>
<li><code>"":::</code>空的汇编语句，实际上不做任何事情</li>
<li><code>"memory"</code>强制编译器假设RAM所有内存单元均被汇编指令修改，cpu的registers和cache的缓存数据将invalidate，cpu不得不在需要的时候重新从内存读取数据</li>
<li>这条语句实际上不生成任何代码，但是会让gcc在barrier()之后刷新寄存器对变量的分配</li>
</ol>


<p>举个例子，考虑下面这段代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;;</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=</span> <span class="n">lock</span><span class="o">-&gt;</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mutex_spin_on_owner</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="n">owner</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码含义大概是自旋的去获取一个mutex, 乍看一下没有问题。但是optimize编译下，compiler发现
循环里面完全没有去修改<code>lock-&gt;owner</code>嘛，没必要每次都取值。然后这段代码可能会优化为这样:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">owner</span> <span class="o">=</span> <span class="n">lock</span><span class="o">-&gt;</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;;</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mutex_spin_on_owner</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="n">owner</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这肯定不是你想要的结果，而且极有可能出现死循环。</p>

<p>多线程情况下，编译器优化有可能会忽略<code>lock-&gt;owner</code>会被其他线程修改的情况。compiler barrier可以告诉编译器这里禁止优化，每次都从内存里面取<code>lock-&gt;owner</code>的值。修改后：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;;</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'>    <span class="n">barrier</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">owner</span> <span class="o">=</span> <span class="n">lock</span><span class="o">-&gt;</span><span class="n">owner</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">owner</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">mutex_spin_on_owner</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="n">owner</span><span class="p">))</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="cm">/* ... */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注：这里不用compiler barrier，<code>onwer = (volatile struct task_struct *)(lock-&gt;owner)</code>;
直接强转为volatile指针也可以解决问题。</p>

<h2>二. memory barrier</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define mb()        __asm__ __volatile__(&quot;lock; addl $0, 0(%%rsp)&quot;:::&quot;memory&quot;)</span>
</span><span class='line'><span class="cp">#define rmb()       mb()</span>
</span><span class='line'><span class="cp">#define wmb()       __asm__ __volatile__(&quot;&quot;:::&quot;memory&quot;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面三个分别是读写内存屏障，读内存屏障和写内存屏障，在常见的x86/x64体系下，通常使用<code>lock</code>指令前缀
加上一个空操作来实现memory barrier, 注意当然不能是真的nop指令，linux中采用<code>addl $0, 0(%esp)</code>。</p>

<p>memory barrier可以保证运行时期的内存访问次序不被重排，保证程序的执行看上去满足顺序一致性。<code>volatile</code>关键字无法做到这一点，所以<code>volatile</code>不能保证是一个memory barrier。</p>

<p>另外也不能指望独立的memory barrier能不做很多事情，mb往往是成对出现的。</p>

<p>考虑下面这种情况，机器有两个核心，x和y都被初始化为0：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">CPU</span> <span class="mi">0</span>                   <span class="n">CPU</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                  <span class="n">r1</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="n">mb</span><span class="p">();</span>                   <span class="n">mb</span><span class="p">();</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                  <span class="n">r2</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>CPU 0和CPU 1走完所有语句之后，总共有下面三种可能:</p>

<ol>
<li><p>r1 == 0 &amp;&amp; r2 == 0: CPU 0在CPU1执行完之后才开始</p></li>
<li><p>r1 == 0 &amp;&amp; r2 == 1: CPU 0和CPU 1物理上并行执行</p></li>
<li><p>r1 == 1 &amp;&amp; r2 == 1: CPU 1在CPU 0执行完之后才开始</p></li>
</ol>


<p>只有<code>r1 == 1 &amp;&amp; r2 == 0</code>这种输出被禁止了，如果这种情况真的出现，那你可以报警了。
这种情况仅仅当CPU 0或CPU 1出现乱序执行的时候才会出现，mb就是为了禁止乱序执行的。
目前Intel的CPU都遵循处理一致性，所有的写操作都遵循程序顺序，不会越过前面的读写操作，不过由于未来可能
会采用更弱的内存一致性模型，在代码里面适当的加上mb保证内存事件的次序仍然是必要的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strlen的实现方法]]></title>
    <link href="http://blog.lightxue.com/strlen-implementation"/>
    <updated>2013-12-07T22:23:46+08:00</updated>
    <id>http://blog.lightxue.com/strlen-implementation</id>
    <content type="html"><![CDATA[<p>感谢<a href="https://plus.google.com/u/0/102034236640204820044">John Smith</a>来稿，笔风太有趣了，能当本博的专栏作家吗？</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="nf">strlen</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">str</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="n">len</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这大概是通常的写法，或者是像C语言程序设计的示例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">strlen</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span> <span class="o">-</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和某B偶然说到这个函数，那B说面试的时候老大问了strlen的写法，他当时用了一种
比较快速的方法。第一反应这货还有快速实现？怎么搞都得遍历完这个字符串，O(n)没跑了，你丫忽悠我。</p>

<p>答曰不是，然后上网去搜了一个glibc的strlen实现。大概如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">size_t</span> <span class="nf">strlen</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">char_ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="o">*</span><span class="n">longword_ptr</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">longword</span><span class="p">,</span> <span class="n">magic_bits</span><span class="p">,</span> <span class="n">himagic</span><span class="p">,</span> <span class="n">lomagic</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">char_ptr</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span><span class="p">)</span> <span class="n">char_ptr</span>
</span><span class='line'>            <span class="o">&amp;</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">longword</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="o">++</span><span class="n">char_ptr</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">char_ptr</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">char_ptr</span> <span class="o">-</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">longword_ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">char_ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">magic_bits</span> <span class="o">=</span> <span class="mh">0x7efefeffL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">himagic</span> <span class="o">=</span> <span class="mh">0x80808080L</span><span class="p">;</span>
</span><span class='line'>    <span class="n">lomagic</span> <span class="o">=</span> <span class="mh">0x01010101L</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">longword</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">magic_bits</span> <span class="o">=</span> <span class="p">((</span><span class="mh">0x7efefefeL</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0xfefefeffL</span><span class="p">;</span>
</span><span class='line'>        <span class="n">himagic</span> <span class="o">=</span> <span class="p">((</span><span class="n">himagic</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="n">himagic</span><span class="p">;</span>
</span><span class='line'>        <span class="n">lomagic</span> <span class="o">=</span> <span class="p">((</span><span class="n">lomagic</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">|</span> <span class="n">lomagic</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">longword</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>        <span class="n">abort</span> <span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">longword</span> <span class="o">=</span> <span class="o">*</span><span class="n">longword_ptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(((</span><span class="n">longword</span> <span class="o">-</span> <span class="n">lomagic</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">himagic</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">longword_ptr</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">longword</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">cp</span> <span class="o">-</span> <span class="n">str</span> <span class="o">+</span> <span class="mi">7</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>艹，这么长(你这么想了，你一定这么想了)。</p>

<p>大概看了下，主要思想是一次取4/8个字节的数据进行判断。减少了将数据从内存搬到寄存器的指令次数。碉堡了，简直碉堡了。</p>

<p>以32位机器为例。</p>

<p>第一步地址4字节对齐。将地址与上<code>0x03</code>，抹掉前面的bits，留下最后两位，检查是否为0，为0则地址是4字节对齐的退出循环，否则地址+1。</p>

<p>第二步4字节作步长，检查取到的4字节中是否有<code>\0</code>，有的话，return 长度，没有继续往后走。检查是否有<code>\0</code>，是通过 <code>(x - 0x01010101L) &amp; 0x80808080L != 0</code>来做的。至于为啥可以这么做，自行列竖式试验下就知道了。如果有<code>\0</code>，遍历那4个字节，看具体是哪个字节是<code>\0</code>。</p>

<p>至此，实现方式已经清楚了。</p>

<p>但是这种方式实际上对于非ascii字符串是有问题的，会误判。所谓步子迈大了容易扯着tama。 unicode，GBK啥的，虽然函数不会出错，但是效率退化到和普通遍历一样了。 GBK是这样编码的好像，比如两字节表示一个字，这种情况下第一个字节肯定是大于等于128。就是说第一个字节最高位是1，这样 <code>(x - 0x01010101L) &amp; 0x80808080L != 0</code>判断是否有<code>\0</code>就失效了，就算上面的判断为true，那4个字节也没有<code>\0</code>，代码会遍历那4个字节，发现实际上没有<code>\0</code>，不退出，继续往后走直到找到<code>\0</code>。</p>

<p>理论上对于ascii字符串，glibc的实现可以达到3X的效率提升，仔细想想 Is it worthwhile?</p>

<p>who knows? ╮(╯_╰)╭, it all depends.</p>

<p>现在的电脑，内存带宽大概在5GB/s(我胡邹的)，<code>mov VAR, %eax</code>这条指令大约消耗十几到几十个时钟周期(这也是胡诌的)。做这样的优化是否有意义不太好说，真是超级无所谓的事情。对程序员来说，就知道大概有这么一种思想，可以这么做，聊以自慰罢了。</p>

<p>&mdash;&mdash;喂喂，你是认真的么</p>

<p>&mdash;&mdash;我错了，我说谎了，最大作用是可以和别人拿来zhuangbility。。。</p>

<p>顺便说一下，CRC32算法也用到这种的思想了(同上)。一次取4字节数据进行计算 + 打表。可以达到原本计算方法几十倍速度的提升吧，大概。。。有兴趣自行wikipedia。</p>

<p>以上</p>

<p>john_smith，2013-12-07，一边听着柿姐的&lt;虎视眈眈>，一边看里番，一边想着中午吃什么，一边写这个。</p>

<p>无所谓，真是超级无所谓的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用PLY编写多功能计算器]]></title>
    <link href="http://blog.lightxue.com/write-swisscalc-by-ply"/>
    <updated>2013-11-24T22:00:52+08:00</updated>
    <id>http://blog.lightxue.com/write-swisscalc-by-ply</id>
    <content type="html"><![CDATA[<p>最近用<a href="http://www.dabeaz.com/ply/ply.html">PLY</a>(Python Lex-Yacc)写了个Vim插件：<a href="https://github.com/lightxue/SwissCalc">SwissCalc</a>。借这个机会复习了下编译原理的一些知识。下面介绍一下用PLY写SwissCalc的过程吧。</p>

<!--more-->


<h2>程序结构</h2>

<p>程序分成3个部分</p>

<ul>
<li>计算器(autoload/swisscalc.py)</li>
<li>内置函数(autoload/builtin.py)</li>
<li>用户自定义函数(autoload/custom.py)</li>
</ul>


<p>这里主要分析计算器部分。</p>

<p>计算器部分有两个类：Parser和Calc。Parser是Calc的父类，对外提供计算器接口，处理一些传入参数，决定一些中间文件的路径等等。Calc是计算器的主要逻辑，一部分负责解释表达式，一部分负责管理计算器内部的逻辑，比如变量命令空间、函数命名空间、环境变量。Calc是计算器最有趣的地方。词法、语法解释就在解释表达式的部分。</p>

<h2>词法解析</h2>

<p>词法解析是把表达式(字符序列)识别成token序列。比如<code>v=13+13</code>经过记法解析会变成<code>v</code> <code>=</code> <code>13</code> <code>+</code> <code>13</code>。词法解析的过程归根结底是自动机扫描字符串。幸运的是现在的词法解析工具都不需要直接写自动机，大都是用正则表达式，PLY也一样。</p>

<p>PLY的词法解析在SwissCalc里这么用。</p>

<p>1.Parser里创建lexer对象，把lexer的命名空间指向类的命令空间。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">lexer</span> <span class="o">=</span> <span class="n">lex</span><span class="o">.</span><span class="n">lex</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">debug</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.在Calc中，指定token的类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tokens</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;ident&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;newline&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;binint&#39;</span><span class="p">,</span> <span class="s">&#39;octint&#39;</span><span class="p">,</span> <span class="s">&#39;hexint&#39;</span><span class="p">,</span> <span class="s">&#39;decint&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;string&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;pointfloat&#39;</span><span class="p">,</span> <span class="s">&#39;exponentfloat&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;add&#39;</span><span class="p">,</span> <span class="s">&#39;subtract&#39;</span><span class="p">,</span> <span class="s">&#39;multiply&#39;</span><span class="p">,</span> <span class="s">&#39;divide&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;modulo&#39;</span><span class="p">,</span> <span class="s">&#39;power&#39;</span><span class="p">,</span> <span class="s">&#39;factorial&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;lshift&#39;</span><span class="p">,</span> <span class="s">&#39;rshift&#39;</span><span class="p">,</span> <span class="s">&#39;and&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">,</span> <span class="s">&#39;or&#39;</span><span class="p">,</span> <span class="s">&#39;xor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;assign&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;addassign&#39;</span><span class="p">,</span> <span class="s">&#39;subassign&#39;</span><span class="p">,</span> <span class="s">&#39;mulassign&#39;</span><span class="p">,</span> <span class="s">&#39;divassign&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;modassign&#39;</span><span class="p">,</span> <span class="s">&#39;powassign&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;lsftassign&#39;</span><span class="p">,</span> <span class="s">&#39;rsftassign&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;andassign&#39;</span><span class="p">,</span> <span class="s">&#39;orassign&#39;</span><span class="p">,</span> <span class="s">&#39;xorassign&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;lparen&#39;</span><span class="p">,</span> <span class="s">&#39;rparen&#39;</span><span class="p">,</span> <span class="s">&#39;comma&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的变量名<code>tokens</code>是固定的，别的名字PLY不认。</p>

<p>3.每种token类型写上对应的正则表达式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">t_ignore</span> <span class="o">=</span> <span class="s">&#39; </span><span class="se">\t</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">t_ident</span> <span class="o">=</span> <span class="s">r&#39;[a-zA-Z_][a-zA-Z0-9_]*&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">t_hexint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="s">r&#39;0[xX][0-9a-fA-F]+&#39;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="n">_escapeseq</span> <span class="o">=</span> <span class="s">r&#39;</span><span class="se">\\</span><span class="s">.&#39;</span>
</span><span class='line'><span class="n">_stringchar</span> <span class="o">=</span> <span class="p">(</span><span class="s">r&quot;[^</span><span class="se">\\</span><span class="s">&#39;]&quot;</span><span class="p">,</span> <span class="s">r&#39;[^</span><span class="se">\\</span><span class="s">&quot;]&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">_singlequote</span> <span class="o">=</span> <span class="s">&quot;&#39;(</span><span class="si">%s</span><span class="s">|</span><span class="si">%s</span><span class="s">)*&#39;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">_escapeseq</span><span class="p">,</span> <span class="n">_stringchar</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">_doublequote</span> <span class="o">=</span> <span class="s">&#39;&quot;(</span><span class="si">%s</span><span class="s">|</span><span class="si">%s</span><span class="s">)*&quot;&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">_escapeseq</span><span class="p">,</span> <span class="n">_stringchar</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">_string</span> <span class="o">=</span> <span class="s">r&#39;[rR]?((</span><span class="si">%s</span><span class="s">)|(</span><span class="si">%s</span><span class="s">))&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">_singlequote</span><span class="p">,</span> <span class="n">_doublequote</span><span class="p">)</span>
</span><span class='line'><span class="nd">@TOKEN</span><span class="p">(</span><span class="n">_string</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">t_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="s">&#39;rR&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&#39;string-escape&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">t_error</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">lexer</span><span class="o">.</span><span class="n">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="ne">SyntaxError</span><span class="p">(</span><span class="s">&quot;illegal character &#39;</span><span class="si">%s</span><span class="s">&#39;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里变量名一样是有要求的。上面<code>tokens</code>里的类型名前面加上<code>t_</code>就是这个类型对应正则表达式的变量名。PLY会通过反射来查找这些变量。像<code>t_ident</code>是变量名的表达式，符合这个正则的字符串会被切出来当变量名。切出来的数据还是字符串。</p>

<p>如果有些特殊需求，比如想让token类型是整数，那么就不能像<code>t_ident</code>那样只写正则表达式了，要像<code>t_hexint</code>那样写成函数。函数的docstring还是正则表达式，token是函数的返回值。这样在函数里就能把字符串类型转成整型了。像行号计数、错误处理都可以用函数去实现。</p>

<p>如果正则表达式比较复杂，写docstring不方便，可以像<code>t_string</code>那样，先把正则表达式拼接好，然后再用<code>@TOKEN(_string)</code>设置<code>t_string</code>的正则表达式。</p>

<p><code>t_ignore</code>是PLY内置的token类型，这种token在解析到的时候会被丢弃。<code>t_error</code>函数词法解析错误的时候调用。</p>

<p>经过这3个步骤词法分析就做好了。这个过程写正则挺有意思的。像字符串的表达式怎么识别内部有转义的引号这种有趣的问题是会有的(没有开玩笑哦，这个计算器是支持字符串的)。Parser里有个函数叫<code>_lexme</code>，参数是表达式，结果是token序列。如果有兴趣可以用它了解一下词法分析的输入和输出。</p>

<h2>语法解析</h2>

<p>语法解析是写SwissCalc最爽的一部分。语法解析是根据token序列解析出语法树。有了语法树，对表达式的语义分析就容易很多了。如果不用PLY，自己手写语法分析还是挺有挑战的(如果打算这么做，推荐使用<a href="http://en.wikipedia.org/wiki/Recursive_descent_parser">递归下降法</a>，可操作性比较强)。用PLY整个语法解析的工作变得轻松不少，基本上只要操作产生式就行。根据产生式分析表达式过程PLY包办了，这是语法解析最复杂的部分，有很多坑。这里要感谢一下PLY，不然写个计算器都不知道要花我多少时间。</p>

<p>PLY支持<a href="http://en.wikipedia.org/wiki/Recursive_descent_parser">LALR</a>和<a href="http://en.wikipedia.org/wiki/Simple_LR_parser">SLR</a>，默认使用LALR，SwissCalc也是用的LALR。LALR和SLR怎么实现的我半懂不懂，感兴趣可以翻翻龙书，如果能翻得下去的话……</p>

<p>写<a href="http://en.wikipedia.org/wiki/Formal_grammar">产生式</a>也是件很有趣的事。PLY产生式用的<a href="http://en.wikipedia.org/wiki/BNF_grammar">BNF</a>，这里不详细介绍了。写产生式花了我一些时间，因为计算机到底需要哪些语法，功能要支持到什么程度就在这时候决定了。要让计算器强大一些，又要适当控制使用的复杂度，很多东西需要取舍。写完产生式其实计算器要做成什么样已经非常清晰了。</p>

<p>PLY的语法分析使用分这几个步骤。</p>

<p>1.在Parser里初始化yacc。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">yacc</span><span class="o">.</span><span class="n">yacc</span><span class="p">(</span><span class="n">module</span><span class="o">=</span><span class="bp">self</span><span class="p">,</span>
</span><span class='line'>          <span class="n">debug</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">debug</span><span class="p">,</span>
</span><span class='line'>          <span class="n">debugfile</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">debugfile</span><span class="p">,</span>
</span><span class='line'>          <span class="n">tabmodule</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">tabmodule</span><span class="p">,</span>
</span><span class='line'>          <span class="n">outputdir</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">basedir</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.编写产生式，像这样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">expression</span> <span class="p">:</span> <span class="n">expression</span> <span class="n">add</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">subtract</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">multiply</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">divide</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="ow">or</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">xor</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="ow">and</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">lshift</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">rshift</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">modulo</span> <span class="n">expression</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">expression</span> <span class="n">power</span> <span class="n">expression</span>
</span><span class='line'>
</span><span class='line'><span class="n">expression</span> <span class="p">:</span> <span class="nb">float</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">ident</span>
</span><span class='line'>
</span><span class='line'><span class="nb">float</span>      <span class="p">:</span> <span class="n">pointfloat</span>
</span><span class='line'>           <span class="o">|</span> <span class="n">exponentfloat</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，产生式出来的语法树，叶子节点肯定要是词法解析的token，比如上面的<code>ident</code> <code>pointfloat</code> <code>exponentfloat</code>。</p>

<p>3.指定运算符的结合性和优先级。</p>

<p>结合性举个例子。<code>2 ** 2 ** 3</code>，如果是这么算<code>(2 ** 2) ** 3</code>，结果是64，那么<code>**</code>是左结合的。如果<code>2 ** (2 ** 3)</code>结果是256，那么<code>**</code>是右结合的。结合性的指定决定了LALR解析时遇到同优先级的操作符是要shift还是要reduce。</p>

<p>优先级就不多说了，像我上面那么写<code>expression</code>，需要指定乘法比加法优先级高才能确保<code>2 + 2 * 3</code>这样的表达式结果是8而不是12。</p>

<p>结合性和优先级像下面这么指定。同理，变量名<code>precedence</code>是固定的。优先级从低到高，同一个元组内的操作级等级相同，元组第一个元素是结合性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">precedence</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;and&#39;</span><span class="p">,</span> <span class="s">&#39;or&#39;</span><span class="p">,</span> <span class="s">&#39;xor&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;lshift&#39;</span><span class="p">,</span> <span class="s">&#39;rshift&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;add&#39;</span><span class="p">,</span> <span class="s">&#39;subtract&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;multiply&#39;</span><span class="p">,</span> <span class="s">&#39;divide&#39;</span><span class="p">,</span> <span class="s">&#39;modulo&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;right&#39;</span><span class="p">,</span><span class="s">&#39;usub&#39;</span><span class="p">,</span> <span class="s">&#39;uadd&#39;</span><span class="p">,</span> <span class="s">&#39;not&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;factorial&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="s">&#39;power&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>4.每一条产生式编写对应的函数，做语义分析。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">p_expression_binop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    expression : expression add expression</span>
</span><span class='line'><span class="sd">               | expression subtract expression</span>
</span><span class='line'><span class="sd">               | expression multiply expression</span>
</span><span class='line'><span class="sd">               | expression divide expression</span>
</span><span class='line'><span class="sd">               | expression or expression</span>
</span><span class='line'><span class="sd">               | expression xor expression</span>
</span><span class='line'><span class="sd">               | expression and expression</span>
</span><span class='line'><span class="sd">               | expression lshift expression</span>
</span><span class='line'><span class="sd">               | expression rshift expression</span>
</span><span class='line'><span class="sd">               | expression modulo expression</span>
</span><span class='line'><span class="sd">               | expression power expression</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;/&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">common_binops</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">common_binops</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">int_binops</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]](</span><span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>像上面这个函数，函数名无所谓，但必须要有<code>p_</code>开头，参数必须 只有一个，docstring是产生式。参数<code>p</code>就像个元组一样，从0开始顺序对应表达式里的各个单词。上面的函数，就是计算器里的二元操作，<code>p[0]</code>保存计算结果，<code>p[2]</code>是运算符，<code>p[1]</code>和<code>p[3]</code>是需要操作的数。</p>

<p><code>p_error</code>在语法解析错误的时候会调用，在里面做一些错误处理。</p>

<p>以上4步就能把语法解析的工作做完了。设定SwissCalc世界观还是相当愉悦的。</p>

<h2>其它</h2>

<p>做完词法、语法解析的工作，计算器基本完工了。SwissCalc有一些特别的功能，值得说一下。</p>

<h3>命名空间</h3>

<p>SwissCalc的变量和函数命名空间各用一个字典来实现。内置函数和用户自定义函数用这种方式导进来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">builtin</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">custom</span>
</span><span class='line'>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;vars&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">show_names</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;funcs&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">show_funcs</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;ff&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_func</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;find_func&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">find_func</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;env&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">env</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;setenv&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">setenv</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="s">&#39;help&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">helper</span>
</span><span class='line'>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">builtin</span><span class="o">.</span><span class="n">funcs</span><span class="p">)</span>
</span><span class='line'><span class="n">cusfuncs</span> <span class="o">=</span> <span class="p">{</span><span class="n">var</span> <span class="p">:</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">custom</span><span class="p">,</span> <span class="n">var</span><span class="p">)</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">custom</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">if</span> <span class="nb">callable</span><span class="p">(</span><span class="nb">getattr</span><span class="p">(</span><span class="n">custom</span><span class="p">,</span> <span class="n">var</span><span class="p">))}</span>
</span><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">cusfuncs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中的<code>vars</code> <code>funcs</code> <code>help</code>等都是一些需要操作变量和函数的命名空间的函数，以提供一些自省的功能。比如<code>help</code>能看函数的帮助。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">helper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    help(func_name)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    print the document of the function which name is func_name</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">func</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">SyntaxError</span><span class="p">(</span><span class="s">&#39;function: </span><span class="si">%s</span><span class="s"> not found&#39;</span> <span class="o">%</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="n">doc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">funcs</span><span class="p">[</span><span class="n">func</span><span class="p">]</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">doc</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">doc</span>
</span></code></pre></td></tr></table></div></figure>


<h3>整数截断</h3>

<p>Python的整数精度是无限大的，只要内存存得下。但是SwissCalc为了模拟整数运算溢出的情况，要把整数截断成用户定义的字长。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">truncint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
</span><span class='line'>    <span class="n">val</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="n">signed</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_env</span><span class="p">[</span><span class="s">&#39;signed&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bits</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_env</span><span class="p">[</span><span class="s">&#39;word&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">bits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">-</span> <span class="nb">bool</span><span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">bits</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="n">signed</span> <span class="o">*</span> <span class="n">bits</span>
</span></code></pre></td></tr></table></div></figure>


<h3>重定向标准输出</h3>

<p>内置函数和用户自定义函数有可能需要标准输出。但是SwissCalc是Vim插件，直接操作标准输出是不会输出到Vim的buffer里的。需要把标准输出的数据接住，然后用Vim提供的方式放到Vim的buffer里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">cStringIO</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">mystdout</span> <span class="o">=</span> <span class="n">cStringIO</span><span class="o">.</span><span class="n">StringIO</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">exeval</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>    <span class="n">yacc</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">SyntaxError</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">exeval</span> <span class="o">=</span> <span class="s">&#39;SyntaxError: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'><span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">exeval</span> <span class="o">=</span> <span class="s">&#39;RuntimeError: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">__stdout__</span>
</span><span class='line'><span class="n">outstr</span> <span class="o">=</span> <span class="n">mystdout</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>以上就是怎么用PLY实现<a href="https://github.com/lightxue/SwissCalc/tree/v1.0.0">SwissCalc v1.0.0</a>(1.0.0? 我这么懒难道还会有更高版本吗？)。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中对象、类型、元类之间的关系]]></title>
    <link href="http://blog.lightxue.com/relationship-among-object-class-metaclass-in-python"/>
    <updated>2013-11-01T23:29:48+08:00</updated>
    <id>http://blog.lightxue.com/relationship-among-object-class-metaclass-in-python</id>
    <content type="html"><![CDATA[<p>Python里的对象、类型和元类的关系很微妙也很有意思。</p>

<p>1989年圣诞节期间，<a href="http://www.python.org/~guido/">上帝</a>很无聊，于是创造了一个世界。</p>

<!--more-->


<h2>对象</h2>

<p>在这个世界的运转有几条定律。</p>

<blockquote><p>1.一切都是对象</p></blockquote>

<p>对象(object)是这个世界的基本组成单位，所有的的事物都由对象构成。</p>

<p>什么是对象？不同的语言对对象的定义不尽相同。在Python的世界里，对象是数据的一种抽象表示。如果看了Python源码，事情就很好解释了，所有能通过PyObject类型的指针访问的都是对象。整数、字符串、元组、列表、字典、函数、模块、包，栈等都是对象。</p>

<p><a href="http://www.python.org/doc/">圣经</a>中<a href="http://docs.python.org/2/reference/datamodel.html#objects-values-and-types">提到</a>，</p>

<blockquote><p>2.所有对象都有三种特性: id、类型、值</p></blockquote>

<p>id是一个对象的编号，每个对象天生都有一个与众不同的编号(目前实现是对象的地址).用<code>id()</code>能看到对象的id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="mi">140657675012776</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个对象都会有类型(type)，类型就像是商品上印的生产厂商一样，标识自己被谁生产出来。用<code>type()</code>可以看到对象的类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">A</span><span class="s">&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>值是对象的价值所在。各种各样的对象保存着各种各样的值，Python的世界才会如此多彩。有的对象值永远不会变，叫不可变对象(immutable)；有的对象值可以变，叫可变对象(mutable)。</p>

<p>再说一次：Python世界里，一切都是对象</p>

<h2>类型</h2>

<p>类(class)就是生产出对象的模具(本文只讨论<a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes">new-style class</a>，classic class不在讨论范围内)。上面说到，每个对象天生都会有个铭牌，写着自己的类型。在Python里，类(class)和型(type)指的是同一件东西。汉字真是精妙，类和型放在一块念是多么的自然。</p>

<blockquote><p>3.每个对象都是由对应的类创建出来的</p></blockquote>

<p>由这个定律很容易理解上文说到的，每个对象都有对应类型。类很像工厂里生产产品的模具，它负责对象的创建，决定了对象将被塑造成什么样，有什么属性、函数。</p>

<p>类可以继承和派生。虽然有点勉强，但姑且这么理解吧。类型B继承类型A，就像相当于模具B是以模型A为原型做出来的。生产出模具B的不是模具A，但模具B是模仿模具A而生产出来的，模具B生产出来的对象拥有模具A生产出来的对象类似的特性。模具B如果以模具A为原型生产出来，模具B身上会络上模具A的版权标识(☺就当做版权保护吧)。用<code>B.__bases__</code>可以看模具B的印记。聪明的你可能已经注意到了，bases是复数，也就是说模具B可以以多个模具为原型，即多重继承。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="n">A</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">A</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;object&#39;</span><span class="o">&gt;</span><span class="p">,)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">B</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">A</span><span class="s">&#39;&gt;,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里注意，模具的版权标识跟对象的类型不一样。每个对象都会有类型，表示自己是哪个模具生产出来的。而模具的版权标识只有模具才会有，标识表示的是这个模具的设计原型哪个模具，并不表示这个模具是由这个原理模具生产出来的。</p>

<p>这里必须要提一下一个特殊的模具，堪称模具之母的模具：object。这个object不是上文说的对象，上文的对象是一个抽象的概念，这里的object是一个具体的模具。所有的模具(除了object自己)沿着印记向上追溯，最后肯定到object。也就是说，所有除了object自己以外的类，都直接或间接地继承了object，无论是内置的(buit-in)还是自定义的(user-defined)。另一方面看，所有对象都直接或间接由模具object生产出来。如果有兴趣的话，用<code>type()</code>把想查看对象的类型找到，再用<code>__baess__</code>向上查找，最后肯定会到object。从源码的角度看，object就是上文提到的PyObject。这跟Python里所有的对象都能用PyObject的指针访问是有关系的。</p>

<h2>元类</h2>

<p>定律1说到，一切都是对象，类型也是对象。相比很多语言，这一点非常特别。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'><span class="mi">140548933792976</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__weakref__&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，类型也像其他对象那样，有id，有类型，有值。它可以当变量、类成员、函数参数。有意思吧？更有意思的在后头。</p>

<p>定律3说到，任何对象都是由类型创建出来的。那类型这种对象是由谁创建出来的呢？继续拿模具来说，生产模具的模具是谁呢？模具的模具：元类(metaclass)。元类跟其它模具不同之处在于，它生产出来的是不是一般的对象，是模具。是不是很神奇？有了元类我们就可以在程序运行时动态生成类了。我们可以根据各种数据和配置，动态地定制我们所需要的类。这里不讨论元类的使用方法。不过元类除了能生产模具之外，跟其它模具相比无其它特别的地方。</p>

<p>有趣的问题又来了，根据定律1，元类也是对象吧，元类是谁生产出来的？元类是模具，生产模具的模具还是元类，所以元类的类型也应该是元类。继续追问下去，元类的元类的元类也是元类……这么追溯到源头(再强调一下，本文只讨论new-style class)，就是一个特殊的元类：type。什么？type不是个查看类型的函数吗？通过<code>help(type)</code>可以知道，type是个类。<code>type()</code>如果传1个对象进去，type会返回这个对象的类型，这是我们熟知的用法；如果传3个对象进去，会生产出一个新的类出来。为什么会把两个功能放到一个类里做呢？可能是历史原因吧。再追问下去，这个终极的元类的类型是什么呢？上帝为了世界设定的统一，使type的类型是它自己。模具把自己生产出来了？这个下面讨论。</p>

<p>type引来的问题不只这些。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">object</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;object&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">type</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;object&#39;</span><span class="o">&gt;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们看到，type这个模具是object为原型造的，而生产object的模具却是type。鸡先生蛋还是蛋先生鸡？Python这个世界是运行在虚拟机上的。世界创建之初虚拟机就把type和object都造出来了。object一出世，生产的模具就写着是type；type一出世，模板的版权印记就记着object。他们一开始就存在了，无所谓谁先谁后。同理，type是不是自己把自己创建也来的问题也一样。</p>

<h2>总结</h2>

<p><img src="http://blog.lightxue.com/images/python_types_map.png" title="对象、类型、元类之间的关系" alt="对象、类型、元类之间的关系" /></p>

<p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html">此文</a>把对象、类型、元类的关系画成了这幅图。三个框分别表示元类、类型、一般对象。把虚线看成产品与模具的关系，实线看成模具与原型的关系，是不是一目了然？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python断整数相加溢出]]></title>
    <link href="http://blog.lightxue.com/python-integer-overflow"/>
    <updated>2013-07-13T22:50:32+08:00</updated>
    <id>http://blog.lightxue.com/python-integer-overflow</id>
    <content type="html"><![CDATA[<p>在python解释器的源码里看到一段有趣的代码，它实现了python两个整数相加时如果溢出则用更大的数据类型保存整数。具体代码的如下。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// python解释器是C语言实现的</span>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="nf">int_add</span><span class="p">(</span><span class="n">PyIntObject</span> <span class="o">*</span><span class="n">v</span><span class="p">,</span> <span class="n">PyIntObject</span> <span class="o">*</span><span class="n">w</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">register</span> <span class="kt">long</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CONVERT_TO_LONG</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CONVERT_TO_LONG</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="cm">/* casts in the line below avoid undefined behaviour on overflow */</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// 重点是这行</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">x</span><span class="o">^</span><span class="n">a</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">b</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>     <span class="c1">// 和这行</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">PyInt_FromLong</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">PyLong_Type</span><span class="p">.</span><span class="n">tp_as_number</span><span class="o">-&gt;</span><span class="n">nb_add</span><span class="p">((</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span><span class="n">v</span><span class="p">,</span> <span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="p">)</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>如果是false，就是发生了溢出。这段代码咋看跟溢出没关系，细看还是挺有名堂的。这个if要判断的是符号位。我们知道，整型的最后一个bit如果是0，那么这个数大于等于0；如果是1，这个数小于0。这个表达式的<code>&gt;= 0</code>判断的就是是否最后一个bit是否是0。</p>

<p>我们知道，^是异或运算：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">0</span> <span class="o">^</span> <span class="mi">0</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">0</span> <span class="o">^</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span> <span class="o">^</span> <span class="mi">0</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span> <span class="o">^</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>简而言之就是两个bit相同得0，两个bit不同得1。也就是说<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>判断的是x与a的符号位相同或x与b的符号位相同。换而言之，x只要跟a和b任意一个数的符号位相同则为true。这跟溢出有什么关系？</p>

<p>我们知道，一个long能表达的数的范围是有限制的，两个long相加的情况不外乎下面6种：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//  没有溢出的情况</span>
</span><span class='line'><span class="err">非负数</span> <span class="o">+</span> <span class="err">非负数</span> <span class="o">=</span> <span class="err">非负数</span>
</span><span class='line'><span class="err">非负数</span> <span class="o">+</span> <span class="err">负数</span> <span class="o">=</span> <span class="err">负</span><span class="o">/</span><span class="err">非负数</span>
</span><span class='line'><span class="err">负数</span> <span class="o">+</span> <span class="err">非负数</span> <span class="o">=</span> <span class="err">负</span><span class="o">/</span><span class="err">非负数</span>
</span><span class='line'><span class="err">负数</span> <span class="o">+</span> <span class="err">负数</span> <span class="o">=</span> <span class="err">负数</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 溢出的情况</span>
</span><span class='line'><span class="err">非负数</span> <span class="o">+</span> <span class="err">非负数</span> <span class="o">=</span> <span class="err">负数</span>
</span><span class='line'><span class="err">负数</span> <span class="o">+</span> <span class="err">负数</span> <span class="o">=</span> <span class="err">非负数</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，没有溢出的情况刚好x和a、b其中一个的符号位相同，而溢出的情况x跟a、b的符号位都不同。所以<code>((x^a) &gt;= 0 || (x^b) &gt;= 0)</code>就刚好能判断出来a+b有没有溢出。</p>

<p>好神奇，我和我的小伙伴们都惊呆了！</p>

<p>有个地方不提一下这个讨论就不完整了。大家可能都注意到代码中的注释了：casts in the line below avoid undefined behaviour on overflow。在<a href="http://en.wikipedia.org/wiki/Integer_overflow">wikipedia</a>上看到的解释是这样的：</p>

<blockquote><p>Since an arithmetic operation may produce a result larger than the maximum representable value, a potential error condition may result. In the C programming language, signed integer overflow causes undefined behavior, while unsigned integer overflow causes the number to be reduced modulo a power of two, meaning that unsigned integers &ldquo;wrap around&rdquo; on overflow.</p></blockquote>

<p>如果是a和b都是signed long，溢出后结果是不确定的，看编译器的实现。如果a或b是unsigned long(相加时另一个也会转成unsigned long)，相加结果再转回long跟上面讨论的6种情况就一样了。</p>

<p>最后留个问题吧，怎么判断两个数相减溢出了呢:&ndash;)</p>

<p>补充：</p>

<p>axu给了我另一种判断整数溢出的判断</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">==</span> <span class="n">b</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">t</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">!=</span> <span class="n">a</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">// overflow</span>
</span></code></pre></td></tr></table></div></figure>


<p>细看其实思路跟上面说的一样，于是弃之不理。望仔看到这段代码后竟然想到去优化这它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">t</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(((</span><span class="n">a</span><span class="o">^</span><span class="n">b</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">((</span><span class="n">a</span><span class="o">^</span><span class="n">t</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">// overflow</span>
</span></code></pre></td></tr></table></div></figure>


<p>确实比上面的解法有所提升。认真思考的心态值得学习，赞一下望仔。</p>
]]></content>
  </entry>
  
</feed>
